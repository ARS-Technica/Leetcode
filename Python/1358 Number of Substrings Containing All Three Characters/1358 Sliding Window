"""
1358. Number of Substrings Containing All Three Characters
Medium
https://leetcode.com/problems/number-of-substrings-containing-all-three-characters/ 

Given a string s consisting only of characters a, b and c.

Return the number of substrings containing at least one occurrence of all these
characters a, b and c.
"""


# Dynamic Sliding Window
# Naive Solution O(N^2)


class Solution:
    def numberOfSubstrings(self, s): 
        res = 0
        
        for i in range(len(s)):
            window = set()
            window.add(s[i])
            
            for j in range(i, len(s)):
                window.add(s[j])

                if len(window) == 3:
                    res += 1
                    window.remove(s[i]) 

        return res


if __name__ == '__main__':
    print(Solution().numberOfSubstrings(s = "abcabc"))                  # 10
    print(Solution().numberOfSubstrings(s = "aaacb"))                   # 3
    print(Solution().numberOfSubstrings(s = "abc"))                     # 1


# Wrong for s = "abcabc" 


#%%


# Dynamic Sliding Window
# Naive Solution O(N^2)


class Solution:
    def numberOfSubstrings(self, s): 
        res = 0

        for i in range(len(s)):
            window = set()
            window.add(s[i])
            
            for j in range(i, len(s)):
                window.add(s[j])

                if len(window) == 3:
                    res += 1
                    window.remove(s[i])

        s = s[::-1]
        
        for i in range(1, len(s)-2):
            window = set()
            window.add(s[i])
            
            # for j in range(i, len(s)-1):  # Works for "abcabc" NOT for "acbbcac"
            for j in range(i, len(s)):   # Works for "acbbcac" NOT for "abcabc"
                window.add(s[j])

                if len(window) == 3:
                    res += 1
                    window.remove(s[i])        

        return res


if __name__ == '__main__':
    print(Solution().numberOfSubstrings(s = "abcabc"))                  # 10
    print(Solution().numberOfSubstrings(s = "aaacb"))                   # 3
    print(Solution().numberOfSubstrings(s = "abc"))                     # 1
    print(Solution().numberOfSubstrings(s = "acbbcac"))                 # 11


# Works for either "abcabc" or "acbbcac", not both 


#%%


# Dynamic Sliding Window
# Naive Solution O(N^2)


class Solution:
    def numberOfSubstrings(self, s): 
        res = 0

        for i in range(len(s)):
            window = set()
            window.add(s[i])

            for j in range(i, len(s)):
                window.add(s[j])

                if len(window) == 3:
                    res += 1
                    # window.remove(s[i]) 

        return res


if __name__ == '__main__':
    print(Solution().numberOfSubstrings(s = "abcabc"))                  # 10
    print(Solution().numberOfSubstrings(s = "aaacb"))                   # 3
    print(Solution().numberOfSubstrings(s = "abc"))                     # 1
    print(Solution().numberOfSubstrings(s = "acbbcac"))                 # 11


# Time Limit Exceeded 


#%%


# Time Complexity: O(N) | Space Complexity: O(1)


class Solution:
    def numberOfSubstrings(self, s):
        left, right = 0, 0        # Intialize our window's bound
        res = 0
        window = []

        # Iterate over elements in our input
        while right < len(s):
            window.append(s[right])
            
            # Expand the window 
            if right >= 2:            

                # Process the current window
                if len(set(window)) == 3:        
                    res += 1
                # Contract the window
                del window[0]
                left += 1

            right += 1

        return res


if __name__ == '__main__':
    print(Solution().numberOfSubstrings(s = "abcabc"))                  # 10
    print(Solution().numberOfSubstrings(s = "aaacb"))                   # 3
    print(Solution().numberOfSubstrings(s = "abc"))                     # 1
    print(Solution().numberOfSubstrings(s = "acbbcac"))                 # 11


# Does not work
"""
4
1
1
2
"""


#%% 


class Solution:
    def numberOfSubstrings(self, s):
        left, right = 0, 0        # Intialize our window's bound
        res = 0
        window = dict()

        # Iterate over elements in our input
        while right < len(s): 
            window[s[right]] = window.get(s[right], 0) + 1

            # Expand the window 
            while len(window) == 3 and left < right:

                # Process the current window 
                res += len(s) - right
                window[s[left]] -= 1

                if window[s[left]] == 0:        
                    window.pop(s[left])
                    
                # Contract the window 
                left += 1

            right += 1

        return res


if __name__ == '__main__':
    print(Solution().numberOfSubstrings(s = "abcabc"))                  # 10
    print(Solution().numberOfSubstrings(s = "aaacb"))                   # 3
    print(Solution().numberOfSubstrings(s = "abc"))                     # 1
    print(Solution().numberOfSubstrings(s = "acbbcac"))                 # 11


# Runtime: 582 ms, faster than 32.82% of Python3 online submissions for Number of Substrings Containing All Three Characters.
# Memory Usage: 14.2 MB, less than 77.75% of Python3 online submissions for Number of Substrings Containing All Three Characters.


#%% 


# Time Complexity: O(N) | Space Complexity: O(1)


class Solution:
    def numberOfSubstrings(self, s):
        left, right = 0, 0        # Intialize our window's bound
        res = 0
        window = dict()

        # Iterate over elements in our input
        while right < len(s):
            rightChar = s[right]
            window[rightChar] = window.get(rightChar, 0) + 1

            # Expand the window 
            while len(window) == 3 and left < right:

                # Process the current window
                leftChar = s[left]
                res += len(s) - right
                window[leftChar] -= 1

                if window[leftChar] == 0:        
                    window.pop(leftChar)
                    
                # Contract the window 
                left += 1

            right += 1

        return res


if __name__ == '__main__':
    print(Solution().numberOfSubstrings(s = "abcabc"))                  # 10
    print(Solution().numberOfSubstrings(s = "aaacb"))                   # 3
    print(Solution().numberOfSubstrings(s = "abc"))                     # 1
    print(Solution().numberOfSubstrings(s = "acbbcac"))                 # 11


# Runtime: 338 ms, faster than 71.86% of Python3 online submissions for Number of Substrings Containing All Three Characters.
# Memory Usage: 14.4 MB, less than 29.92% of Python3 online submissions for Number of Substrings Containing All Three Characters.


#%% 
