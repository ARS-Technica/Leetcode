

import collections 


class Solution:
    def findAnagrams(self, s, p,): 
        p_dict = collections.Counter(p)
        s_dict = collections.Counter(s[:len(p)-1]) 
        
        res = []
        start = 0 
        
        for i in range(len(p)-1, len(s)): 
            s_dict[s[i]] += 1 
            
            if s_dict == p_dict:
                res.append(start)

            s_dict[s[start]] -= 1 
            
            if s_dict[s[start]] == 0:
                del s_dict[s[start]]
                
            start += 1
            
        return res


if __name__ == "__main__":
    lc = Solution() 
    print(lc.findAnagrams(s = "cbaebabacd", p = "abc"))             # [0,6]
    print(lc.findAnagrams(s = "abab", p = "ab"))                    # [0,1,2] 
    print(lc.findAnagrams(s = "ababababab", p = "aab"))             # [0,2,4,6]

# Runtime: 449 ms, faster than 24.88% of Python3 online submissions for Find All Anagrams in a String.
# Memory Usage: 15.3 MB, less than 6.39% of Python3 online submissions for Find All Anagrams in a String.

