"""
904. Fruit Into Baskets
Medium
https://leetcode.com/problems/fruit-into-baskets/

You are visiting a farm that has a single row of fruit trees arranged from left
to right. The trees are represented by an integer array fruits where fruits[i]
is the type of fruit the ith tree produces.

You want to collect as much fruit as possible. However, the owner has some
strict rules that you must follow:

You only have two baskets, and each basket can only hold a single type of fruit.
There is no limit on the amount of fruit each basket can hold.
Starting from any tree of your choice, you must pick exactly one fruit from every
tree (including the start tree) while moving to the right. The picked fruits must
fit in one of your baskets.

Once you reach a tree with fruit that cannot fit in your baskets, you must stop.
Given the integer array fruits, return the maximum number of fruits you can pick.
"""


from collections import Counter


class Solution:
    def totalFruit(self, fruits):
        freq = Counter()
        result = 0
        right = 0

        for left, num in enumerate(fruits):
            freq[num] += 1

            while len(freq) > 2:
                freq[fruits[right]] -= 1

                if freq[fruits[right]] == 0:
                    freq.pop(fruits[right])

                right += 1

            result = max(result, left - right + 1)

        return result


if __name__ == '__main__':
    print(Solution().totalFruit(fruits = [1,2,1]))          # 3
    print(Solution().totalFruit(fruits = [0,1,2,2]))        # 3
    print(Solution().totalFruit(fruits = [1,2,3,2,2]))      # 4


# Runtime: 1070 ms, faster than 66.4% of Python3 online submissions
# Memory Usage: 20.1 MB, less than 52.9% of Python3 online submissions


#%%


from collections import defaultdict


class Solution:
    def totalFruit(self, fruits):
        freq = defaultdict(int)
        left = 0
        length = len(fruits)
        result = 0

        if len(Counter(fruits)) < 3: return length

        for right in range(length):
            freq[fruits[right]] += 1

            while len(freq) > 2:
                freq[fruits[left]] -= 1

                if freq[fruits[left]] == 0:
                    del freq[fruits[left]]

                left += 1

            result = max(result, right - left + 1)

        return max(result, length - left)
 

if __name__ == '__main__':
    print(Solution().totalFruit(fruits = [1,2,1]))          # 3
    print(Solution().totalFruit(fruits = [0,1,2,2]))        # 3
    print(Solution().totalFruit(fruits = [1,2,3,2,2]))      # 4


# Runtime: 1006 ms, faster than 78.50% of Python3 online submissions
# Memory Usage: 20 MB, less than 77.45% of Python3 online submissions


#%%
