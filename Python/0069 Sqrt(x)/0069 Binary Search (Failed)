"""
69. Sqrt(x)
Easy 
https://leetcode.com/problems/sqrtx/submissions/

Given a non-negative integer x, compute and return the square root of x.

Since the return type is an integer, the decimal digits are truncated, and only 
the integer part of the result is returned.

Note: You are not allowed to use any built-in exponent function or operator, 
such as pow(x, 0.5) or x ** 0.5.
"""

# I have clearly missed something.


class Solution:
    def mySqrt(self, x):
        left = 0
        right = x
        
        while left <= right:
            middle = (left + right) // 2
            
            if (middle * middle) < x:
                left = middle
            elif (middle * middle) > x:
                right = middle
            else:
                return middle
        
        return left

 
if __name__ == "__main__":
    lc = Solution() 
    print(lc.solve(4))      # 2
    print(lc.solve(8))      # 2


# Time Limit Exceeded

#%%


class Solution:
    def mySqrt(self, x):
        left = 0
        right = x
        
        while left <= right:
            middle = (left + right) // 2
            
            if (middle * middle) < x:
                left = middle
            elif (middle * middle) > x:
                right = middle - 1
            else:
                return middle
        
        return left

 
if __name__ == "__main__":
    lc = Solution() 
    print(lc.solve(4))      # 2
    print(lc.solve(8))      # 2


# Time Limit Exceeded

#%%


class Solution:
    def mySqrt(self, x):
        left = 0
        right = x
        
        while left < right:
            middle = (left + right) // 2
            
            if (middle * middle) < x:
                left = middle
            else:
                right = middle - 1 
        
        return left

 
if __name__ == "__main__":
    lc = Solution() 
    print(lc.solve(4))      # 2
    print(lc.solve(8))      # 2


# Time Limit Exceeded

#%%


class Solution:
    def mySqrt(self, x):
        left = 0
        right = x
        
        while left < right:
            middle = (left + right) // 2
            
            if middle <= x // middle:
                left = middle
            else:
                right = middle - 1 
        
        return left

 
if __name__ == "__main__":
    lc = Solution() 
    print(lc.solve(4))      # 2
    print(lc.solve(8))      # 2


# Time Limit Exceeded

