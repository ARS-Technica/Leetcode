"""
56. Merge Intervals
Medium
https://leetcode.com/problems/merge-intervals/

Given an array of intervals where intervals[i] = [starti, endi], merge all
overlapping intervals, and return an array of the non-overlapping intervals that
cover all the intervals in the input.
"""


class Solution:
    def merge(self, intervals):        
        result = []
        start, stop = intervals[0]

        for next_start, next_stop in intervals[1:]:
            if stop < next_start:               # If there's no overlap
                result.append([start, stop])
                start, stop = next_start, next_stop
            else:
                stop = max(stop, next_stop)     # Find the highest number

        result.append([start, stop])

        return result


if __name__ == '__main__':
    print(Solution().merge(intervals = [[1,3],[2,6],[8,10],[15,18]]))           # [[1,6],[8,10],[15,18]]
    print(Solution().merge(intervals = [[1,4],[4,5]]))                          # [[1,5]]
    print(Solution().merge(intervals = [[1,4],[0,4]]))                          # [[0,4]]


# Doesn't work for [[1,4],[0,4]]
# The second interval comes before the first interval


#%%


class Solution:
    def merge(self, intervals):        
        intervals = sorted(intervals, key=lambda i: i[0])
        result = []
        start, stop = intervals[0]

        for next_start, next_stop in intervals[1:]:
            if stop < next_start:               # If there's no overlap
                result.append([start, stop])
                start, stop = next_start, next_stop
            else:
                stop = max(stop, next_stop)     # Find the highest number

        result.append([start, stop])

        return result


if __name__ == '__main__':
    print(Solution().merge(intervals = [[1,3],[2,6],[8,10],[15,18]]))           # [[1,6],[8,10],[15,18]]
    print(Solution().merge(intervals = [[1,4],[4,5]]))                          # [[1,5]]
    print(Solution().merge(intervals = [[1,4],[0,4]]))                          # [[0,4]]


# Runtime: 395 ms, faster than 16.65% of Python3 online submissions for Merge Intervals.
# Memory Usage: 18.9 MB, less than 10.43% of Python3 online submissions for Merge Intervals.


#%%


class Solution:
    def merge(self, intervals):        
        intervals.sort()
        result = []
        start, stop = intervals[0]

        for next_start, next_stop in intervals[1:]:
            if stop < next_start:               # If there's no overlap
                result.append([start, stop])
                start, stop = next_start, next_stop
            else:
                stop = max(stop, next_stop)     # Find the highest number

        result.append([start, stop])

        return result


if __name__ == '__main__':
    print(Solution().merge(intervals = [[1,3],[2,6],[8,10],[15,18]]))           # [[1,6],[8,10],[15,18]]
    print(Solution().merge(intervals = [[1,4],[4,5]]))                          # [[1,5]]
    print(Solution().merge(intervals = [[1,4],[0,4]]))                          # [[0,4]]


# Runtime: 320 ms, faster than 57.82% of Python3 online submissions for Merge Intervals.
# Memory Usage: 18.9 MB, less than 27.60% of Python3 online submissions for Merge Intervals.


#%%
