"""
1487. Making File Names Unique
Medium
https://leetcode.com/problems/making-file-names-unique/ 

Given an array of strings names of size n. You will create n folders in your
file system such that, at the ith minute, you will create a folder with the name names[i].

Since two files cannot have the same name, if you enter a folder name that was
previously used, the system will have a suffix addition to its name in the form
of (k), where, k is the smallest positive integer such that the obtained name
remains unique.

Return an array of strings of length n where ans[i] is the actual name the
system will assign to the ith folder when you create it.
"""

# Failed


class Solution:
    def getFolderNames(self, names): 
        result = []
        unique = set()


        def evaluate(name):
                if name not in unique:
                    unique.add(name)
                    result.append(name)
                else:
                    serialize(name)


        def serialize(name):
            if '(' in name:
                first, second = name.index("("), name.index(")") 

                serial = int(name[first+1:second])
                title = name[:first]
                name = title + '(' + str(serial + 1) + ')'

                evaluate(name)

            else:
                name = name + '(1)'

                evaluate(name)


        for idx, name in enumerate(names):            
            evaluate(name)


        return result


if __name__ == "__main__":
    print(Solution().getFolderNames(names = ["pes","fifa","gta","pes(2019)"]))  # ["pes","fifa","gta","pes(2019)"]
    print(Solution().getFolderNames(names = ["gta","gta(1)","gta","avalon"]))   # ["gta","gta(1)","gta(2)","avalon"]
    print(Solution().getFolderNames(["onepiece","onepiece(1)","onepiece(2)","onepiece(3)","onepiece"]))     # ["onepiece","onepiece(1)","onepiece(2)","onepiece(3)","onepiece(4)"]


# Didn't work for ["kaido","kaido(1)","kaido","kaido(1)"]
# Output: ["kaido","kaido(1)","kaido(2)","kaido(3)"]
# Expected: ["kaido","kaido(1)","kaido(2)","kaido(1)(1)"]

# I have clearly failed to understand the assignment


#%%


class Solution:
    def getFolderNames(self, names):
        result = []
        unique = {}
        
        for name in names:
            if name in unique:
                n = unique[name]
                temp = name + '('+ str(n) + ')'

                while temp in unique:
                    n += 1
                    temp = name + '(' + str(n) + ')'

                result.append(temp)
                unique[temp] = 1
                unique[name] += 1

            else :
                unique[name] = 1
                result.append(name)
                    
        return result


if __name__ == "__main__":
    print(Solution().getFolderNames(names = ["pes","fifa","gta","pes(2019)"]))  # ["pes","fifa","gta","pes(2019)"]
    print(Solution().getFolderNames(names = ["gta","gta(1)","gta","avalon"]))   # ["gta","gta(1)","gta(2)","avalon"]
    print(Solution().getFolderNames(["onepiece","onepiece(1)","onepiece(2)","onepiece(3)","onepiece"]))     # ["onepiece","onepiece(1)","onepiece(2)","onepiece(3)","onepiece(4)"]


# Runtime: 1044 ms, faster than 27.92% of Python3 online submissions for Making File Names Unique.
# Memory Usage: 27.3 MB, less than 69.41% of Python3 online submissions for Making File Names Unique.


#%%


# Better solution. Not mine.
# https://leetcode.com/problems/making-file-names-unique/discuss/2525759/Clean-and-well-structured-Python-implementation-(Top-92.2)


class Solution:
    def getFolderNames(self, names):
        # Hashmap will store the name as key and the number of times that name has duplicated so fas as value.
        hashmap = {}

        for name in names:
            modified = name
            # Check whether the name has already been used
            if name in hashmap:
                # Get the number of times the {name} has been used
                k = hashmap[name]
                # Calculate the next available suffix.
                while modified in hashmap:
                    k += 1
                    modified = f'{name}({k})'
                # Update the number of times the original {name} is used. This will help to efficiently check for next available suffix if the {name} again comes in future.
                hashmap[name] = k
            # Store the modified {name} with 0 as it is not duplicated yet.
            hashmap[modified] = 0

        # Return the keys of hashmap as that would be the unique file names.
        return hashmap.keys()


if __name__ == "__main__":
    print(Solution().getFolderNames(names = ["pes","fifa","gta","pes(2019)"]))  # ["pes","fifa","gta","pes(2019)"]
    print(Solution().getFolderNames(names = ["gta","gta(1)","gta","avalon"]))   # ["gta","gta(1)","gta(2)","avalon"]
    print(Solution().getFolderNames(["onepiece","onepiece(1)","onepiece(2)","onepiece(3)","onepiece"]))     # ["onepiece","onepiece(1)","onepiece(2)","onepiece(3)","onepiece(4)"]


# Runtime: 830 ms, faster than 60.10% of Python3 online submissions for Making File Names Unique.
# Memory Usage: 28.1 MB, less than 49.20% of Python3 online submissions for Making File Names Unique.


#%%


