"""
605. Can Place Flowers
Easy
https://leetcode.com/problems/can-place-flowers/

You have a long flowerbed in which some of the plots are planted, and some are
not. However, flowers cannot be planted in adjacent plots.

Given an integer array flowerbed containing 0's and 1's, where 0 means empty
and 1 means not empty, and an integer n, return if n new flowers can be planted
in the flowerbed without violating the no-adjacent-flowers rule.
"""


class Solution:
    def canPlaceFlowers(self, flowerbed, n):
        s = len(flowerbed)
        bed = [0] + flowerbed + [0]

        for i in range(1, s+1):
            if bed[i] == bed[i-1] == bed[i+1] == 0:
                bed[i] = 1
                n -= 1

            if n <= 0: return True

        return False


if __name__ == '__main__':
    print(Solution().canPlaceFlowers(flowerbed = [1,0,0,0,1], n = 1))           # True
    print(Solution().canPlaceFlowers(flowerbed = [1,0,0,0,1], n = 2))           # False
    print(Solution().canPlaceFlowers(flowerbed = [0,0,1,0,1], n = 1))           # True
    print(Solution().canPlaceFlowers(flowerbed = [1,0,0,0,1,0,0], n = 2))       # True
    print(Solution().canPlaceFlowers(flowerbed = [1], n = 0))                   # True
    print(Solution().canPlaceFlowers(flowerbed = [1,0], n = 1))                 # False
    print(Solution().canPlaceFlowers(flowerbed = [1,0,0,0,0,0,1], n = 2))       # True
    print(Solution().canPlaceFlowers(flowerbed = [0,0], n = 2))                 # False 
    print(Solution().canPlaceFlowers(flowerbed = [1], n = 1))                   # False
    print(Solution().canPlaceFlowers(flowerbed = [0,0,0,0], n = 3))             # False
    print(Solution().canPlaceFlowers(flowerbed = [0,0,0,0,0], n = 3))           # True


# Runtime: 386 ms, faster than 47.32% of Python3 online submissions for Can Place Flowers.
# Memory Usage: 14.5 MB, less than 5.94% of Python3 online submissions for Can Place Flowers.


#%%


class Solution:
    def canPlaceFlowers(self, flowerbed, n):
        length = len(flowerbed)
        flowerbed = [0] + flowerbed + [0]

        for i in range(1, length+1):
            if flowerbed[i] == flowerbed[i-1] == flowerbed[i+1] == 0:
                flowerbed[i] = 1
                n -= 1

        return n <= 0


if __name__ == '__main__':
    print(Solution().canPlaceFlowers(flowerbed = [1,0,0,0,1], n = 1))           # True
    print(Solution().canPlaceFlowers(flowerbed = [1,0,0,0,1], n = 2))           # False
    print(Solution().canPlaceFlowers(flowerbed = [0,0,1,0,1], n = 1))           # True
    print(Solution().canPlaceFlowers(flowerbed = [1,0,0,0,1,0,0], n = 2))       # True
    print(Solution().canPlaceFlowers(flowerbed = [1], n = 0))                   # True
    print(Solution().canPlaceFlowers(flowerbed = [1,0], n = 1))                 # False
    print(Solution().canPlaceFlowers(flowerbed = [1,0,0,0,0,0,1], n = 2))       # True
    print(Solution().canPlaceFlowers(flowerbed = [0,0], n = 2))                 # False 
    print(Solution().canPlaceFlowers(flowerbed = [1], n = 1))                   # False
    print(Solution().canPlaceFlowers(flowerbed = [0,0,0,0], n = 3))             # False
    print(Solution().canPlaceFlowers(flowerbed = [0,0,0,0,0], n = 3))           # True


# Runtime: 371 ms, faster than 53.69% of Python3 online submissions for Can Place Flowers.
# Memory Usage: 14.4 MB, less than 30.87% of Python3 online submissions for Can Place Flowers.


#%%
