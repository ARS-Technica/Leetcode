"""
1313. Decompress Run-Length Encoded List
Easy
https://leetcode.com/problems/decompress-run-length-encoded-list/ 

We are given a list nums of integers representing a list compressed with run-length encoding.

Consider each adjacent pair of elements [freq, val] = [nums[2*i], nums[2*i+1]] 
(with i >= 0).  For each such pair, there are freq elements with value val 
concatenated in a sublist. Concatenate all the sublists from left to right to 
generate the decompressed list.

Return the decompressed list.
"""


class Solution:
    def decompressRLElist(self, nums):
        res = []
        for i in range(1, len(nums), 2):
            res.extend([nums[i]] * nums[i - 1])
        return res
 

if __name__ == "__main__":
    lc = Solution() 
    print(lc.decompressRLElist([1,2,3,4]))          # [2,4,4,4]
    print(lc.decompressRLElist([1,1,2,3]))          # [1,3,3] 


# Runtime: 101 ms, faster than 39.70% of Python3 online submissions for Decompress Run-Length Encoded List.
# Memory Usage: 14.5 MB, less than 54.34% of Python3 online submissions for Decompress Run-Length Encoded List.

