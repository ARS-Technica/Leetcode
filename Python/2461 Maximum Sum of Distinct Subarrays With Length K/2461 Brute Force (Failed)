"""
2461. Maximum Sum of Distinct Subarrays With Length K
Medium
https://leetcode.com/problems/maximum-sum-of-distinct-subarrays-with-length-k/ 

You are given an integer array nums and an integer k. Find the maximum subarray
sum of all the subarrays of nums that meet the following conditions:

The length of the subarray is k, and
All the elements of the subarray are distinct.
Return the maximum subarray sum of all the subarrays that meet the conditions.
If no subarray meets the conditions, return 0.

A subarray is a contiguous non-empty sequence of elements within an array.
"""


class Solution:
    def maximumSubarraySum(self, nums, k): 
        '''
        nums = set(nums) 
        nums = list(nums)
        nums = nums[-1:-(k+1):-1] 
        return sum(nums)
        '''
        
        return sum(list(set(nums))[-1:-(k+1):-1])

if __name__ == '__main__':
    print(Solution().maximumSubarraySum(nums = [1,5,4,2,9,9,9], k = 3))            # 15
    print(Solution().maximumSubarraySum(nums = [4,4,4], k = 3))                    # 0


# Doesn't work because it won't accept any number that has been repeated


#%%


from collections import Counter


class Solution:
    def maximumSubarraySum(self, nums, k):
        frequency = Counter(nums)
        distinctNums = [k for k, v in frequency.items() if v == 1]
        return sum(distinctNums[-1:-(k+1):-1])


if __name__ == '__main__':
    print(Solution().maximumSubarraySum(nums = [1,5,4,2,9,9,9], k = 3))            # 15
    print(Solution().maximumSubarraySum(nums = [4,4,4], k = 3))                    # 0


# Misunderstood the exercise 
# The exercise is asking for a contiguous subarray without any repeating numbers


#%%


# Brute Force


class Solution:
    def maximumSubarraySum(self, nums, k):
        length = len(nums)
        result = 0

        for idx in range(length - k+1):
            window = nums[idx : idx+k]
            if len(window) == len(set(window)):
                result = max(result, sum(window))

        return result


if __name__ == '__main__':
    print(Solution().maximumSubarraySum(nums = [1,5,4,2,9,9,9], k = 3))            # 15
    print(Solution().maximumSubarraySum(nums = [4,4,4], k = 3))                    # 0


# Time Limit Exceeded 


#%%
