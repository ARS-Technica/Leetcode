

# Sliding Window


"""
2461. Maximum Sum of Distinct Subarrays With Length K
Medium
https://leetcode.com/problems/maximum-sum-of-distinct-subarrays-with-length-k/

You are given an integer array nums and an integer k. Find the maximum subarray
sum of all the subarrays of nums that meet the following conditions:

The length of the subarray is k, and
All the elements of the subarray are distinct.
Return the maximum subarray sum of all the subarrays that meet the conditions.
If no subarray meets the conditions, return 0.

A subarray is a contiguous non-empty sequence of elements within an array.
"""


# Sliding Window


class Solution:
    def maximumSubarraySum(self, nums, k):
        if len(set(nums)) < k: return 0

        left = 0
        result = 0
        window = set(nums[:k])

        for right in range((k-1), len(nums)):            
            window.add(nums[right])
            total = sum(nums[left : right+1])          

            if len(window) == k:
                result = max(result, total)
                window.remove(nums[left])
                left += 1

            else:
                left += 1
                window = set(nums[left : right+1])

        return result


if __name__ == '__main__':
    print(Solution().maximumSubarraySum(nums = [1,5,4,2,9,9,9], k = 3))            # 15
    print(Solution().maximumSubarraySum(nums = [4,4,4], k = 3))                    # 0
    print(Solution().maximumSubarraySum(nums = [1,2,2], k = 2))                    # 3
    print(Solution().maximumSubarraySum(nums = [1,1,1,7,8,9], k = 3))              # 24
    print(Solution().maximumSubarraySum(nums = [9,9,9,1,2,3], k = 3))              # 12


# Time Limit Exceeded


#%%


# Sliding Window


class Solution:
    def maximumSubarraySum(self, nums, k):
        if len(set(nums)) < k: return 0

        left = 0
        length = len(nums)
        result = 0
        window = nums[0:k-1]

        for right in range(k-1, length):
            # print(right, 'Window: ', window)
            window.append(nums[right])

            if len(set(window)) == k:
                total = sum(window)
                result = max(result, total)

            del window[0]
            left += 1

        return result


if __name__ == '__main__':
    print(Solution().maximumSubarraySum(nums = [1,5,4,2,9,9,9], k = 3))            # 15
    print(Solution().maximumSubarraySum(nums = [4,4,4], k = 3))                    # 0
    print(Solution().maximumSubarraySum(nums = [1,2,2], k = 2))                    # 3
    print(Solution().maximumSubarraySum(nums = [1,1,1,7,8,9], k = 3))              # 24
    print(Solution().maximumSubarraySum(nums = [9,9,9,1,2,3], k = 3))              # 12


# Time Limit Exceeded


#%% 


# Sliding Window


class Solution:
    def maximumSubarraySum(self, nums, k):
        left = 0
        length = len(nums)
        result = 0
        total = 0
        window  = set()

        for right in range(length):
            total += nums[right]

            while nums[right] in window or right + 1 - left > k:
                window.remove(nums[left])
                total -= nums[left]
                left += 1

            window.add(nums[right])

            if right+1-left == k:
                result = max(result, total)

        return result or 0


if __name__ == '__main__':
    print(Solution().maximumSubarraySum(nums = [1,5,4,2,9,9,9], k = 3))            # 15
    print(Solution().maximumSubarraySum(nums = [4,4,4], k = 3))                    # 0
    print(Solution().maximumSubarraySum(nums = [1,2,2], k = 2))                    # 3
    print(Solution().maximumSubarraySum(nums = [1,1,1,7,8,9], k = 3))              # 24
    print(Solution().maximumSubarraySum(nums = [9,9,9,1,2,3], k = 3))              # 12


# Runtime: 2394 ms, faster than 18.50% of Python3 online submissions for Maximum Sum of Distinct Subarrays With Length K.
# Memory Usage: 28.8 MB, less than 96.45% of Python3 online submissions for Maximum Sum of Distinct Subarrays With Length K.


#%%
