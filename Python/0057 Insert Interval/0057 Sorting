"""
57. Insert Interval
Medium
https://leetcode.com/problems/insert-interval/

You are given an array of non-overlapping intervals intervals where
intervals[i] = [starti, endi] represent the start and the end of the ith
interval and intervals is sorted in ascending order by starti. You are also
given an interval newInterval = [start, end] that represents the start and end
of another interval.

Insert newInterval into intervals such that intervals is still sorted in ascending
order by starti and intervals still does not have any overlapping intervals
(merge overlapping intervals if necessary).

Return intervals after the insertion.
"""


# Failed

class Solution:
    def insert(self, intervals, newInterval):
        intervals.sort()
        start, stop = newInterval
        temp = []


        # Solution from Leetcode 56
        def merge(arr):        
            intervals.sort()
            result = []
            start, stop = arr[0]

            for next_start, next_stop in arr[1:]:
                if stop < next_start:               # If there's no overlap
                    result.append([start, stop])
                    start, stop = next_start, next_stop
                else:
                    stop = max(stop, next_stop)     # Find the highest number

            result.append([start, stop])

            return result


        for next_start, next_stop in intervals:
            if next_start <= start <= next_stop:
                first = min(start, next_start)
                second = max(stop, next_stop)
                temp.append([first, second])
            else:
                temp.append([next_start, next_stop])


        # print(temp)
        return merge(temp)        
        

if __name__ == '__main__':
    print(Solution().insert(intervals = [[1,3],[6,9]], newInterval = [2,5]))                        # [[1,5],[6,9]]
    print(Solution().insert(intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]))   # [[1,2],[3,10],[12,16]]
    print(Solution().insert(intervals = [], newInterval = [5,7]))  


# Failed for intervals = [], newInterval = [5,7]
# IndexError: list index out of range


#%%


class Solution:
    def insert(self, intervals, newInterval):
        if not intervals:
            return [newInterval]


        intervals.sort()
        start, stop = newInterval
        temp = []


        # Solution from Leetcode 56
        def merge(arr):        
            intervals.sort()
            result = []
            start, stop = arr[0]

            for next_start, next_stop in arr[1:]:
                if stop < next_start:               # If there's no overlap
                    result.append([start, stop])
                    start, stop = next_start, next_stop
                else:
                    stop = max(stop, next_stop)     # Find the highest number

            result.append([start, stop])

            return result


        for next_start, next_stop in intervals:
            if next_start <= start <= next_stop:
                first = min(start, next_start)
                second = max(stop, next_stop)
                temp.append([first, second])
            else:
                temp.append([next_start, next_stop])


        print(temp)
        return merge(temp)        


if __name__ == '__main__':
    print(Solution().insert(intervals = [[1,3],[6,9]], newInterval = [2,5]))                        # [[1,5],[6,9]]
    print(Solution().insert(intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]))   # [[1,2],[3,10],[12,16]]
    print(Solution().insert(intervals = [], newInterval = [5,7]))                                   # [5,7]
    print(Solution().insert(intervals = [[1,5]], newInterval = [6,8]))                              # [[1,5],[6,8]]


# Fails for intervals = [[1,5]], newInterval = [6,8]
# NewInterval isn't added to temp if it isn't joined to an interval from intervales array


#%%


class Solution:
    def insert(self, intervals, newInterval):
        if not intervals:
            return [newInterval]


        intervals.sort()
        start, stop = newInterval
        temp = []


        # Solution from Leetcode 56
        def merge(arr):        
            intervals.sort()
            result = []
            start, stop = arr[0]

            for next_start, next_stop in arr[1:]:
                if stop < next_start:               # If there's no overlap
                    result.append([start, stop])
                    start, stop = next_start, next_stop
                else:
                    stop = max(stop, next_stop)     # Find the highest number

            result.append([start, stop])

            return result


        for next_start, next_stop in intervals:
            included = False
            
            if next_start <= start <= next_stop:
                first = min(start, next_start)
                second = max(stop, next_stop)
                temp.append([first, second])
                included = True
            else:
                temp.append([next_start, next_stop])


        if included == False:
            temp.append(newInterval)
            temp.sort()


        # print(temp)
        return merge(temp)        


if __name__ == '__main__':
    print(Solution().insert(intervals = [[1,3],[6,9]], newInterval = [2,5]))                        # [[1,5],[6,9]]
    print(Solution().insert(intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]))   # [[1,2],[3,10],[12,16]]
    print(Solution().insert(intervals = [], newInterval = [5,7]))                                   # [5,7]
    print(Solution().insert(intervals = [[1,5]], newInterval = [6,8]))                              # [[1,5],[6,8]]


# Runtime: 190 ms, faster than 36.96% of Python3 online submissions for Insert Interval.
# Memory Usage: 17.7 MB, less than 6.21% of Python3 online submissions for Insert Interval.


#%%


class Solution:
    def insert(self, intervals, newInterval):
        if not intervals:
            return [newInterval]


        intervals.sort()
        result = []
        start, stop = newInterval
        temp = []


        for next_start, next_stop in intervals:
            included = False
            
            if next_start <= start <= next_stop:
                first = min(start, next_start)
                second = max(stop, next_stop)
                temp.append([first, second])
                included = True
            else:
                temp.append([next_start, next_stop])


        if included == False:
            temp.append(newInterval)
            temp.sort()

        
        start, stop = temp[0]

        for next_start, next_stop in temp[1:]:
            if stop < next_start:               # If there's no overlap
                result.append([start, stop])
                start, stop = next_start, next_stop
            else:
                stop = max(stop, next_stop)     # Find the highest number

        result.append([start, stop])

        return result


if __name__ == '__main__':
    print(Solution().insert(intervals = [[1,3],[6,9]], newInterval = [2,5]))                        # [[1,5],[6,9]]
    print(Solution().insert(intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]))   # [[1,2],[3,10],[12,16]]
    print(Solution().insert(intervals = [], newInterval = [5,7]))                                   # [5,7]
    print(Solution().insert(intervals = [[1,5]], newInterval = [6,8]))                              # [[1,5],[6,8]]


# Runtime: 115 ms, faster than 77.54% of Python3 online submissions for Insert Interval.
# Memory Usage: 17.6 MB, less than 15.74% of Python3 online submissions for Insert Interval.


#%%


class Solution:
    def insert(self, intervals, newInterval):
        intervals.append(newInterval)

        intervals = sorted(intervals, key = lambda x: x[0]) 
        res = [intervals[0]] 

        for current in intervals[1:]: 
            if current[0] <= res[-1][1]: 
                res[-1][1] = max(current[1], res[-1][1]) 
            else: 
                res.append(current)

        return res 


if __name__ == '__main__':
    print(Solution().insert(intervals = [[1,3],[6,9]], newInterval = [2,5]))                        # [[1,5],[6,9]]
    print(Solution().insert(intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]))   # [[1,2],[3,10],[12,16]]
    print(Solution().insert(intervals = [], newInterval = [5,7]))                                   # [5,7]
    print(Solution().insert(intervals = [[1,5]], newInterval = [6,8]))                              # [[1,5],[6,8]]


# Recycling the optimal code for Problem 56 is surprisingly less efficent

# Runtime: 187 ms, faster than 40.74% of Python3 online submissions for Insert Interval.
# Memory Usage: 17.4 MB, less than 53.30% of Python3 online submissions for Insert Interval.


#%%
