"""
719. Find K-th Smallest Pair Distance
Hard
https://leetcode.com/problems/find-k-th-smallest-pair-distance/ 

The distance of a pair of integers a and b is defined as the absolute difference
between a and b.

Given an integer array nums and an integer k, return the kth smallest distance
among all the pairs nums[i] and nums[j] where 0 <= i < j < nums.length.

Constraints:

n == nums.length
2 <= n <= 104
0 <= nums[i] <= 106
1 <= k <= n * (n - 1) / 2
"""


from itertools import permutations
 
class Solution:
    def smallestDistancePair(self, nums, k):
        perm = permutations(nums, 2)
        res = []

        for i in list(perm): 
            res.append(abs(i[0] - i[1]))

        res = sorted(res)
        print(res)
        return res[k]


if __name__ == "__main__":
    lc = Solution() 
    print(lc.smallestDistancePair(nums = [1,3,1], k = 1))                       # 0
    print(lc.smallestDistancePair(nums = [1,1,1], k = 2))                       # 0
    print(lc.smallestDistancePair(nums = [1,6,1], k = 3))                       # 5
    print(lc.smallestDistancePair(nums = [9,10,7,10,6,1,5,4,9,8], k = 18))      # 2

# Failed for nums = [9,10,7,10,6,1,5,4,9,8], k = 18


#%%
 

from itertools import permutations
 
class Solution:
    def smallestDistancePair(self, nums, k): 
        return sorted(abs(i[0] - i[1]) for i in list(permutations(nums, 2)))[k]


if __name__ == "__main__":
    lc = Solution() 
    print(lc.smallestDistancePair(nums = [1,3,1], k = 1))       # 0
    print(lc.smallestDistancePair(nums = [1,1,1], k = 2))       # 0
    print(lc.smallestDistancePair(nums = [1,6,1], k = 3))       # 5


# nums = [9,10,7,10,6,1,5,4,9,8], k = 18


#%%
