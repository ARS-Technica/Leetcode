"""
978. Longest Turbulent Subarray
Medium
https://leetcode.com/problems/longest-turbulent-subarray/

Given an integer array arr, return the length of a maximum size turbulent subarray of arr.

A subarray is turbulent if the comparison sign flips between each adjacent pair
of elements in the subarray.

More formally, a subarray [arr[i], arr[i + 1], ..., arr[j]] of arr is said to be
turbulent if and only if:

For i <= k < j:
    arr[k] > arr[k + 1] when k is odd, and
    arr[k] < arr[k + 1] when k is even.

Or, for i <= k < j:
    arr[k] > arr[k + 1] when k is even, and
    arr[k] < arr[k + 1] when k is odd.    
"""


class Solution:
    def maxTurbulenceSize(self, arr):
        n = len(arr)   
        result = 1

        greater = [1] * n
        smaller = [1] * n

        for i in range(1, n):
            if arr[i] > arr[i-1]:
                greater[i] = smaller[i-1] + 1 
            elif arr[i] < arr[i - 1]:
                smaller[i] = greater[i-1] + 1

            result = max(result, greater[i], smaller[i])

        return result


if __name__ == "__main__":
    print(Solution().maxTurbulenceSize(arr = [9,4,2,10,7,8,8,1,9]))         # 5
    print(Solution().maxTurbulenceSize(arr = [4,8,12,16]))                  # 2
    print(Solution().maxTurbulenceSize(arr = [100]))                        # 1


# Runtime: 522 ms, faster than 72.15% of Python3 online submissions for Continuous Subarray Sum.
# Memory Usage: 19 MB, less than 14.56% of Python3 online submissions for Continuous Subarray Sum. 


#%%


# Not mine
# https://github.com/AnasImloul/Leetcode-Solutions/blob/main/scripts/algorithms/L/Longest%20Turbulent%20Subarray/Longest%20Turbulent%20Subarray.py


class Solution:
    def maxTurbulenceSize(self, arr):
        def compare(a, b):
            if a == b: return 0
            if a > b : return 1
            return -1

        n = len(arr)
        prev = 0
        result = 1

        for i in range(1, n):
            c = compare(arr[i-1], arr[i])

            if c == 0:
                prev = i

            elif i == n - 1 or c * compare(arr[i], arr[i+1]) != -1:
                result = result if result > i - prev + 1 else i - prev + 1
                prev = i

        return result


if __name__ == "__main__":
    print(Solution().maxTurbulenceSize(arr = [9,4,2,10,7,8,8,1,9]))         # 5
    print(Solution().maxTurbulenceSize(arr = [4,8,12,16]))                  # 2
    print(Solution().maxTurbulenceSize(arr = [100]))                        # 1


# Runtime: 530 ms, faster than 66.67% of Python3 online submissions for Continuous Subarray Sum.
# Memory Usage: 18.7 MB, less than 23.84% of Python3 online submissions for Continuous Subarray Sum. 


#%%
