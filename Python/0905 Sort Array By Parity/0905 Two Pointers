"""
905. Sort Array By Parity
Easy
https://leetcode.com/problems/sort-array-by-parity/ 

Given an integer array nums, move all the even integers at the beginning of the
array followed by all the odd integers.

Return any array that satisfies this condition.

Constraints:
1 <= nums.length <= 5000
0 <= nums[i] <= 5000
"""


class Solution:
    def sortArrayByParity(self, nums):
        left = 0
        right = len(nums) - 1
        
        while left < right:
            if nums[left] & 1 == 0 and nums[right] & 1 == 0:
                left += 1
            elif nums[left] & 1 != 0 and nums[right] & 1 == 0:
                nums[left], nums[right] = nums[right], nums[left]
                left += 1
                right -= 1
            elif nums[left] & 1 == 0 and nums[right] & 1 != 0:
                right -= 1
            elif nums[left] & 1 != 0 and nums[right] & 1 != 0:
                right -= 1            
                
        return nums


if __name__ == "__main__":
    lc = Solution() 
    print(lc.sortArrayByParity(nums = [3,1,2,4]))       # [2,4,3,1]
    print(lc.sortArrayByParity(nums = [0]))             # [0] 
    print(lc.sortArrayByParity(nums = [1,3]))           # [0] 


# Runtime: 138 ms, faster than 23.52% of Python3 online submissions for Sort Array By Parity.
# Memory Usage: 14.7 MB, less than 65.32% of Python3 online submissions for Sort Array By Parity.


#%%


class Solution:
    def sortArrayByParity(self, nums):
        left = 0
        right = len(nums) - 1
        
        while left < right:
            if nums[left] & 1 == 0:
                left += 1
            elif nums[right] & 1 == 0:
                nums[left], nums[right] = nums[right], nums[left]
                left += 1
                right -= 1
            else:
                right -= 1         
                
        return nums


if __name__ == "__main__":
    lc = Solution() 
    print(lc.sortArrayByParity(nums = [3,1,2,4]))       # [2,4,3,1]
    print(lc.sortArrayByParity(nums = [0]))             # [0] 
    print(lc.sortArrayByParity(nums = [1,3]))           # [0] 


# Runtime: 127 ms, faster than 32.44% of Python3 online submissions for Sort Array By Parity.
# Memory Usage: 14.8 MB, less than 19.39% of Python3 online submissions for Sort Array By Parity.

