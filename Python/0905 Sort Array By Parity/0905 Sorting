"""
905. Sort Array By Parity
Easy
https://leetcode.com/problems/sort-array-by-parity/ 

Given an integer array nums, move all the even integers at the beginning of the
array followed by all the odd integers.

Return any array that satisfies this condition.

Constraints:
1 <= nums.length <= 5000
0 <= nums[i] <= 5000
"""


class Solution:
    def sortArrayByParity(self, nums):
        return sorted(nums, key=lambda x: x % 2)


if __name__ == "__main__":
    lc = Solution() 
    print(lc.sortArrayByParity(nums = [3,1,2,4]))       # [2,4,3,1]
    print(lc.sortArrayByParity(nums = [0]))             # [0] 
    print(lc.sortArrayByParity(nums = [1,3]))           # [0] 


# Runtime: 80 ms, faster than 92.13% of Python3 online submissions for Sort Array By Parity.
# Memory Usage: 14.7 MB, less than 19.39% of Python3 online submissions for Sort Array By Parity.


#%%


class Solution:
    def sortArrayByParity(self, nums):
        return sorted(nums, key=lambda x: x & 1)


if __name__ == "__main__":
    lc = Solution() 
    print(lc.sortArrayByParity(nums = [3,1,2,4]))       # [2,4,3,1]
    print(lc.sortArrayByParity(nums = [0]))             # [0] 
    print(lc.sortArrayByParity(nums = [1,3]))           # [0] 


# Runtime: 91 ms, faster than 74.01% of Python3 online submissions for Sort Array By Parity.
# Memory Usage: 14.6 MB, less than 65.32% of Python3 online submissions for Sort Array By Parity.

