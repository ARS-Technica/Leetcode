"""
1030. Matrix Cells in Distance Order
Easy
https://leetcode.com/problems/matrix-cells-in-distance-order/description/

You are given four integers row, cols, rCenter, and cCenter. There is a rows x
cols matrix and you are on the cell with the coordinates (rCenter, cCenter).

Return the coordinates of all cells in the matrix, sorted by their distance from
(rCenter, cCenter) from the smallest distance to the largest distance. You may
return the answer in any order that satisfies this condition.

The distance between two cells (r1, c1) and (r2, c2) is |r1 - r2| + |c1 - c2|.
"""


class Solution:
    def allCellsDistOrder(self, rows, cols, rCenter, cCenter):
        cells = []
        freq = {}
        result = []

        for i in range(0, rows):
            for j in range(0, cols):
                cells.append([i, j])

        # print(cells)

        for cell in cells:
            distance = abs(cell[0] - rCenter) + abs(cell[1] - cCenter)

            if distance not in freq:
                freq[distance] = [cell]
            else:
                freq[distance].append(cell)

        #print(freq)
        freq = sorted(freq.items(), key=lambda i: i)
        #print(freq)

        for tup in freq: 
            for lst in tup[1]:
                result.append(lst)

        #print(result)
        return result


if __name__ == "__main__":
    print(Solution().allCellsDistOrder(rows = 1, cols = 2, rCenter = 0, cCenter = 0))       # [[0,0],[0,1]]
    print(Solution().allCellsDistOrder(rows = 2, cols = 2, rCenter = 0, cCenter = 1))       # [[0,1],[0,0],[1,1],[1,0]]
    print(Solution().allCellsDistOrder(rows = 2, cols = 3, rCenter = 1, cCenter = 2))       # [[1,2],[0,2],[1,1],[0,1],[1,0],[0,0]]


# Runtime: 162 ms, faster than 75.37% of Python3 online submissions
# Memory Usage: 16.1 MB, less than 32.94% of Python3 online submissions


#%%
