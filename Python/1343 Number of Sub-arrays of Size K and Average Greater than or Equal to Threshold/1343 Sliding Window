"""
1343. Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold
Medium
https://leetcode.com/problems/number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold/ 

Given an array of integers arr and two integers k and threshold, return the
number of sub-arrays of size k and average greater than or equal to threshold.
"""

# Static Sliding Window


class Solution:
    def numOfSubarrays(self, arr, k, threshold):
        res = 0
        window = []

        for i in range(len(arr) - (k-1)):
            window = arr[i:i+k]
            if sum(window) / k >= threshold: res += 1

        return res


if __name__ == "__main__":
    print(Solution().numOfSubarrays(arr = [2,2,2,2,5,5,5,8], k = 3, threshold = 4))             # 3
    print(Solution().numOfSubarrays(arr = [11,13,17,23,29,31,7,5,2,3], k = 3, threshold = 5))   # 6 
    print(Solution().numOfSubarrays(arr = [1,1,1,1,1], k = 1, threshold = 0))                   # 5


# Time Limit Exceeded 


#%%


class Solution:
    def numOfSubarrays(self, arr, k, threshold): 
        left = 0 
        res = 0
        window = 0.0

        # Iterate over elements in our input
        for right in range(len(arr)):
            window += arr[right] 

            # Expand the window 
            if right >= k-1: 
                # Process the current window 
                if (window / k) >= threshold:
                    res += 1

                # Contract the window
                window -= arr[left]
                left += 1 

        return res


if __name__ == "__main__":
    print(Solution().numOfSubarrays(arr = [2,2,2,2,5,5,5,8], k = 3, threshold = 4))             # 3
    print(Solution().numOfSubarrays(arr = [11,13,17,23,29,31,7,5,2,3], k = 3, threshold = 5))   # 6 
    print(Solution().numOfSubarrays(arr = [1,1,1,1,1], k = 1, threshold = 0))                   # 5


# Runtime: 1697 ms, faster than 13.07% of Python3 online submissions for Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold.
# Memory Usage: 27.2 MB, less than 52.84% of Python3 online submissions for Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold.


#%%


class Solution:
    def numOfSubarrays(self, arr, k, threshold):  
        res = 0
        window = 0

        for i in range(0, k-1):
            window += arr[i] 

        for i in range(k-1, len(arr)):
            window += arr[i]

            if (window / k) >= threshold:
                res += 1

            window -= arr[i - k + 1]

        return res


if __name__ == "__main__":
    print(Solution().numOfSubarrays(arr = [2,2,2,2,5,5,5,8], k = 3, threshold = 4))             # 3
    print(Solution().numOfSubarrays(arr = [11,13,17,23,29,31,7,5,2,3], k = 3, threshold = 5))   # 6 
    print(Solution().numOfSubarrays(arr = [1,1,1,1,1], k = 1, threshold = 0))                   # 5


# Runtime: 1210 ms, faster than 43.51% of Python3 online submissions for Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold.
# Memory Usage: 27.3 MB, less than 25.08% of Python3 online submissions for Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold.


#%%
