"""
1572. Matrix Diagonal Sum
Easy
https://leetcode.com/problems/matrix-diagonal-sum/description/

Given a square matrix mat, return the sum of the matrix diagonals.

Only include the sum of all the elements on the primary diagonal and all the
elements on the secondary diagonal that are not part of the primary diagonal.
"""


class Solution:
    def diagonalSum(self, mat):
        left_diagonal = []
        right_diagonal = []

        length = len(mat)

        for num in range(length): 
            # print(mat[num][num])
            left_diagonal.append(mat[num][num])

        for num in range(length):
            # print(num, (length - 1) - num)
            right_diagonal.append(mat[num][(length - 1) - num])

        # print(left_diagonal, right_diagonal)
        if length & 1 != 0: del right_diagonal[length//2]
        return sum(left_diagonal) + sum(right_diagonal)


if __name__ == '__main__':
    print(Solution().diagonalSum(mat = [[1,2,3],
              [4,5,6],
              [7,8,9]]))        # 25
    print(Solution().diagonalSum(mat = [[1,1,1,1],
              [1,1,1,1],
              [1,1,1,1],
              [1,1,1,1]]))        # 8


# Runtime: 123 ms, faster than 69.26% of Python3 online submissions
# Memory Usage: 14.3 MB, less than 16.89% of Python3 online submissions


#%%


class Solution:
    def diagonalSum(self, mat):
        length = len(mat)
        result = 0

        for num in range(length):
            result += mat[num][num]

        for num in range(length):
            result += mat[num][(length - 1) - num]

        if length & 1 != 0: result -= mat[length//2][length//2]
        return result


if __name__ == '__main__':
    print(Solution().diagonalSum(mat = [[1,2,3],
              [4,5,6],
              [7,8,9]]))        # 25
    print(Solution().diagonalSum(mat = [[1,1,1,1],
              [1,1,1,1],
              [1,1,1,1],
              [1,1,1,1]]))        # 8


# Runtime: 109 ms, faster than 93.43% of Python3 online submissions
# Memory Usage: 14.1 MB, less than 94.8% of Python3 online submissions


#%%


class Solution:
    def diagonalSum(self, mat):
        length = len(mat)
        left_diagonal = sum([mat[num][num] for num in range(length)])
        right_diagonal = sum([mat[num][(length - 1) - num] for num in range(length)])
        result = left_diagonal + right_diagonal

        if length & 1 != 0: result -= mat[length//2][length//2]
        return result


if __name__ == '__main__':
    print(Solution().diagonalSum(mat = [[1,2,3],
              [4,5,6],
              [7,8,9]]))        # 25
    print(Solution().diagonalSum(mat = [[1,1,1,1],
              [1,1,1,1],
              [1,1,1,1],
              [1,1,1,1]]))        # 8


# Runtime: 110 ms, faster than 91.99% of Python3 online submissions
# Memory Usage: 14.1 MB, less than 54.20% of Python3 online submissions


#%%


class Solution:
    def diagonalSum(self, mat):
        length = len(mat)
        middle = length // 2
        result = 0

        for num in range(length):
            result += mat[num][num]
            result += mat[num][(length - 1) - num]

        if length & 1 != 0: result -= mat[middle][middle]
        return result


if __name__ == '__main__':
    print(Solution().diagonalSum(mat = [[1,2,3],
              [4,5,6],
              [7,8,9]]))        # 25
    print(Solution().diagonalSum(mat = [[1,1,1,1],
              [1,1,1,1],
              [1,1,1,1],
              [1,1,1,1]]))        # 8


# Runtime: 125 ms, faster than 67.70% of Python3 online submissions
# Memory Usage: 14.3 MB, less than 16.89% of Python3 online submissions


#%%


class Solution:
    def diagonalSum(self, mat):
        length = len(mat)
        middle = length // 2

        result = sum([mat[num][num] + mat[num][(length - 1) - num] for num in range(length)])

        if length & 1 != 0: result -= mat[middle][middle]
        return result


if __name__ == '__main__':
    print(Solution().diagonalSum(mat = [[1,2,3],
              [4,5,6],
              [7,8,9]]))        # 25
    print(Solution().diagonalSum(mat = [[1,1,1,1],
              [1,1,1,1],
              [1,1,1,1],
              [1,1,1,1]]))        # 8


# Runtime: 113 ms, faster than 87.3% of Python3 online submissions
# Memory Usage: 14.1 MB, less than 54.20% of Python3 online submissions


#%%
