"""
209. Minimum Size Subarray Sum
Medium
https://leetcode.com/problems/minimum-size-subarray-sum/ 

Given an array of positive integers nums and a positive integer target, return
the minimal length of a contiguous subarray [numsl, numsl+1, ..., numsr-1, numsr]
of which the sum is greater than or equal to target. If there is no such subarray,
return 0 instead.
"""


class Solution:
    def minSubArrayLen(self, target, nums): 
        if nums == None or len(nums) == 0: return 0
        if target in nums: return 1

        result = float("inf")

        for i in range(len(nums)):
            total = 0

            for j in range(i, len(nums)):
                total += nums[j]

                if j - i < result and total >= target:
                    result = j - i + 1

        return 0 if result == float("inf") else result


if __name__ == "__main__": 
    print(Solution().minSubArrayLen(target = 7, nums = [2,3,1,2,4,3]))          # 2
    print(Solution().minSubArrayLen(target = 4, nums = [1,4,4]))                # 1
    print(Solution().minSubArrayLen(target = 11, nums = [1,1,1,1,1,1,1,1]))     # 0
    print(Solution().minSubArrayLen(target = 11, nums = [1,2,3,4,5]))           # 3


# Time Limit Exceeded

