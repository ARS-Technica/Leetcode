"""
209. Minimum Size Subarray Sum
Medium
https://leetcode.com/problems/minimum-size-subarray-sum/ 

Given an array of positive integers nums and a positive integer target, return
the minimal length of a contiguous subarray [numsl, numsl+1, ..., numsr-1, numsr]
of which the sum is greater than or equal to target. If there is no such subarray,
return 0 instead.
"""


class Solution:
    def minSubArrayLen(self, target, nums):
        n = len(nums)
        left = right = 0
        sum, res = 0, n + 1
        while right < n:
            sum += nums[right]
            while sum >= target:
                res = min(res, right - left + 1)
                sum -= nums[left]
                left += 1
            right += 1
        return 0 if res == n + 1 else res


if __name__ == "__main__": 
    print(Solution().minSubArrayLen(target = 7, nums = [2,3,1,2,4,3]))          # 2
    print(Solution().minSubArrayLen(target = 4, nums = [1,4,4]))                # 1
    print(Solution().minSubArrayLen(target = 11, nums = [1,1,1,1,1,1,1,1]))     # 0


# Runtime: 689 ms, faster than 7.43% of Python3 online submissions for Minimum Size Subarray Sum.
# Memory Usage: 27.2 MB, less than 10.77% of Python3 online submissions for Minimum Size Subarray Sum. 
    
    
