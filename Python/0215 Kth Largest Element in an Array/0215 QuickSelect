"""
215. Kth Largest Element in an Array
Medium
https://leetcode.com/problems/kth-largest-element-in-an-array/

Given an integer array nums and an integer k, return the kth largest element in the array.

Note that it is the kth largest element in the sorted order, not the kth distinct element.

You must solve it in O(n) time complexity.
"""


class Solution:
    def findKthLargest(self, nums, k): 
        k = len(nums) - k

        def quickSelect(left, right):
            pivot, pointer = nums[right], left

            for idx in range(left, right):
                if nums[idx] <= pivot:
                    nums[pointer], nums[idx] = nums[idx], nums[pointer]
                    pointer += 1

            nums[pointer], nums[right] = nums[right], nums[pointer]

            if pointer > k:     return quickSelect(left, pointer - 1)
            elif pointer < k:   return quickSelect(pointer + 1, right)
            else:               return nums[pointer]

        return quickSelect(0, len(nums) - 1)


if __name__ == '__main__':
    print(Solution().findKthLargest(nums = [3,2,1,5,6,4], k = 2))               # 5
    print(Solution().findKthLargest(nums = [3,2,3,1,2,4,5,5,6], k = 4))         # 4


# Runtime: 6597 ms, faster than 5.00% of Python3 online submissions for Kth Largest Element in an Array.
# Memory Usage: 37.2 MB, less than 6.61% of Python3 online submissions for Kth Largest Element in an Array.


#%%


# QuickSelect
# Better Solution. Not mine.
# https://leetcode.com/problems/kth-largest-element-in-an-array/discuss/60293/Share-my-Python-solution-with-QuickSelect-idea


import random


class Solution:
    def findKthLargest(self, nums, k): 
        pivot = random.choice(nums)
        left  = [l for l in nums if l < pivot]
        equal = [e for e in nums if e == pivot]
        right = [r for r in nums if r > pivot]
    
        if k <= len(right):
            return self.findKthLargest(right, k)
        elif (k - len(right)) <= len(equal):
            return equal[0]
        else:
            return self.findKthLargest(left, k - len(right) - len(equal))


if __name__ == '__main__':
    print(Solution().findKthLargest(nums = [3,2,1,5,6,4], k = 2))               # 5
    print(Solution().findKthLargest(nums = [3,2,3,1,2,4,5,5,6], k = 4))         # 4


# Runtime: 1032 ms, faster than 72.63% of Python3 online submissions for Kth Largest Element in an Array.
# Memory Usage: 27.8 MB, less than 33.39% of Python3 online submissions for Kth Largest Element in an Array.


#%%
