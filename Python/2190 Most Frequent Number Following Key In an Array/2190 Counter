"""
2190. Most Frequent Number Following Key In an Array
Easy
https://leetcode.com/problems/most-frequent-number-following-key-in-an-array/

You are given a 0-indexed integer array nums. You are also given an integer key, which is present in nums.

For every unique integer target in nums, count the number of times target
immediately follows an occurrence of key in nums. In other words, count the number of indices i such that:

0 <= i <= nums.length - 2,
nums[i] == key and,
nums[i + 1] == target.

Return the target with the maximum count. The test cases will be generated such
that the target with maximum count is unique.
"""


from collections import Counter


class Solution:
    def mostFrequent(self, nums, key):
        frequency = Counter()
        max_freq = result = 0

        for idx, num in enumerate(nums[:-1]):
            if num == key:

                target = nums[idx + 1]
                frequency[target] += 1

                if max_freq < frequency[target]:
                    max_freq = frequency[target]
                    result = nums[idx + 1]

        return result


if __name__ == '__main__':
    print(Solution().mostFrequent(nums = [1,100,200,1,100], key = 1))       # 100
    print(Solution().mostFrequent(nums = [2,2,2,2,3], key = 2))             # 2  


# Runtime: 220 ms, faster than 14.54% of Python3 online submissions for Most Frequent Number Following Key In an Array.
# Memory Usage: 14 MB, less than 91.41% of Python3 online submissions for Most Frequent Number Following Key In an Array.


#%%


from collections import Counter


class Solution:
    def mostFrequent(self, nums, key):
        frequency = Counter() 

        for idx, num in enumerate(nums[:-1]):
            if num == key:
                target = nums[idx + 1]
                frequency[target] += 1 

        return frequency.most_common(1)[0][0]


if __name__ == '__main__':
    print(Solution().mostFrequent(nums = [1,100,200,1,100], key = 1))       # 100
    print(Solution().mostFrequent(nums = [2,2,2,2,3], key = 2))             # 2  


# Runtime: 153 ms, faster than 69.60% of Python3 online submissions for Most Frequent Number Following Key In an Array.
# Memory Usage: 14.1 MB, less than 43.39% of Python3 online submissions for Most Frequent Number Following Key In an Array.


#%%
