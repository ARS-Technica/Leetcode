"""
169 Majority Element
Easy
https://leetcode.com/problems/majority-element/ 

Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. 
You may assume that the majority element always exists in the array.
"""


class Solution:
    def majorityElement(self, nums):
        counts = {i: nums.count(i) for i in set(nums)}
        
        print(counts)
        print(list(max(counts.items()))[0])
 

if __name__ == "__main__":
    lc = Solution() 
    print(lc.majorityElement([3,2,3]))              # 3
    print(lc.majorityElement([2,2,1,1,1,2,2]))      # 2 


#%%


class Solution:
    def majorityElement(self, nums):
        counts = {i: nums.count(i) for i in set(nums)}
        return max(counts, key=counts.get)
 

if __name__ == "__main__":
    lc = Solution() 
    print(lc.majorityElement([3,2,3]))              # 3
    print(lc.majorityElement([2,2,1,1,1,2,2]))      # 2 


# Runtime: 251 ms, faster than 39.35% of Python3 online submissions for Majority Element.
# Memory Usage: 15.5 MB, less than 31.44% of Python3 online submissions for Majority Element.

