"""
1695. Maximum Erasure Value
Medium
https://leetcode.com/problems/maximum-erasure-value/

You are given an array of positive integers nums and want to erase a subarray
containing unique elements. The score you get by erasing the subarray is equal
to the sum of its elements.

Return the maximum score you can get by erasing exactly one subarray.

An array b is called to be a subarray of a if it forms a contiguous subsequence
of a, that is, if it is equal to a[l],a[l+1],...,a[r] for some (l,r).
"""


class Solution:
    def maximumUniqueSubarray(self, nums):
        left = 0
        result = 0
        used = set()
        window = 0

        for right in nums:
            if right not in used:
                used.add(right)
                window += right

            else:
                while left < len(nums) and nums[left] != right:
                    used.remove(nums[left])
                    window -= nums[left]
                    left += 1

                left += 1

            result = max(result, window)

        return result


if __name__ == '__main__':
    print(Solution().maximumUniqueSubarray(nums = [4,2,4,5,6]))                 # 17
    print(Solution().maximumUniqueSubarray(nums = [5,2,1,2,5,2,1,2,5]))         # 8


# Runtime: 1166 ms, faster than 98.97% of Python3 online submissions
# Memory Usage: 28.2 MB, less than 28.28% of Python3 online submissions


#%%
