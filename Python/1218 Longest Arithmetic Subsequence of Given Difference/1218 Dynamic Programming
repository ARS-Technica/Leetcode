"""
1218. Longest Arithmetic Subsequence of Given Difference
Medium
https://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference/description/

Given an integer array arr and an integer difference, return the length of the
longest subsequence in arr which is an arithmetic sequence such that the difference
between adjacent elements in the subsequence equals difference.

A subsequence is a sequence that can be derived from arr by deleting some or no
elements without changing the order of the remaining elements.
"""


from collections import defaultdict


class Solution:
    def longestSubsequence(self, arr, difference):
        # dp[i] is the longest subsequence ending with number i
        dp = defaultdict(int)
        result = 1

        for i in arr:
            dp[i] = dp[i - difference] + 1
            #print(dp, ' Result:', result)
            result = max(result, dp[i])

        return result


if __name__ == "__main__":
    print(Solution().longestSubsequence(arr = [1,2,3,4], difference = 1))    # 4
    print(Solution().longestSubsequence(arr = [1,3,5,7], difference = 1))    # 1
    print(Solution().longestSubsequence(arr = [1,5,7,8,5,3,4,2,1], difference = -2))    # 4


# Runtime: 596 ms, faster than 71.49% of Python3 online submissions for Continuous Subarray Sum.
# Memory Usage: 27.7 MB, less than 71.49% of Python3 online submissions for Continuous Subarray Sum. 


#%%


class Solution:
    def longestSubsequence(self, arr, difference):
        # dp[i] is the longest subsequence ending with number i
        dp = {}

        for i in arr:
            if i - difference in dp:
                dp[i] = dp[i - difference] + 1
            else:
                dp[i] = 1

        return max(dp.values())


if __name__ == "__main__":
    print(Solution().longestSubsequence(arr = [1,2,3,4], difference = 1))    # 4
    print(Solution().longestSubsequence(arr = [1,3,5,7], difference = 1))    # 1
    print(Solution().longestSubsequence(arr = [1,5,7,8,5,3,4,2,1], difference = -2))    # 4


# Runtime: 516 ms, faster than 99.60% of Python3 online submissions for Continuous Subarray Sum.
# Memory Usage: 27.6 MB, less than 71.49% of Python3 online submissions for Continuous Subarray Sum. 


#%% 


# Not mine.
# https://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference/solutions/398183/python3-4-liner/


from collections import Counter


class Solution:
    def longestSubsequence(self, arr, difference):
        dp = Counter()

        for i in arr:
            dp[i] = max(dp[i], dp[i - difference] + 1)

        return max(dp.values())


if __name__ == "__main__":
    print(Solution().longestSubsequence(arr = [1,2,3,4], difference = 1))    # 4
    print(Solution().longestSubsequence(arr = [1,3,5,7], difference = 1))    # 1
    print(Solution().longestSubsequence(arr = [1,5,7,8,5,3,4,2,1], difference = -2))    # 4


# Runtime: 649 ms, faster than 51% of Python3 online submissions for Continuous Subarray Sum.
# Memory Usage: 27.7 MB, less than 71.49% of Python3 online submissions for Continuous Subarray Sum. 


#%%
