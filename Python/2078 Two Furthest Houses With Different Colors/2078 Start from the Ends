# Start with the assumption that any answer will include one of the two ends of the array, [0] or [-1]

class Solution:
    def maxDistance(self, colors): 
        diff = 0 
        
        for idx, n in enumerate(colors): 
            if n != colors[0]: 
                diff = max(diff, idx)
            if n != colors[-1]: 
                diff = max(diff, len(colors)-1 - idx)
            
        return diff


if __name__ == "__main__":
    lc = Solution() 
    print(lc.maxDistance([1,1,1,6,1,1,1]))                          # 3
    print(lc.maxDistance([1,8,3,8,3]))                              # 4
    print(lc.maxDistance([0,1]))                                    # 1
    print(lc.maxDistance([4,4,4,11,4,4,11,4,4,4,4,4]))              # 8

# Runtime: 31 ms, faster than 96.42% of Python3 online submissions for Two Furthest Houses With Different Colors.
# Memory Usage: 14 MB, less than 79.85% of Python3 online submissions for Two Furthest Houses With Different Colors.



