"""
2078. Two Furthest Houses With Different Colors
Easy 
https://leetcode.com/problems/two-furthest-houses-with-different-colors/

There are n houses evenly lined up on the street, and each house is beautifully 
painted. You are given a 0-indexed integer array colors of length n, where colors[i] 
represents the color of the ith house.

Return the maximum distance between two houses with different colors.

The distance between the ith and jth houses is abs(i - j), where abs(x) is the 
absolute value of x.
"""


class Solution:
    def maxDistance(self, colors):        
        left = colors[0]
        right = colors[-1]
        #print(left, right)
        
        if left != right:
            return len(colors) - 1
 
            
        return colors.index(right) - colors.index(left) - 1


if __name__ == "__main__":
    lc = Solution() 
    print(lc.maxDistance([1,1,1,6,1,1,1]))  # 3
    print(lc.maxDistance([1,8,3,8,3]))      # 4
    print(lc.maxDistance([0,1]))            # 1


# Failed
# Only returns correct answer if first and last element of list are different


#%%


class Solution:
    def maxDistance(self, colors):        
        left = colors[0]
        #right = colors[-1]
        #print(left, right)
        
        for color in colors:
            if left != colors[-1]:
                return len(colors) - 1
            else:
                #colors.remove(colors[-1])
                colors.pop()
                print(colors, colors[-1])
            
        return colors.index(right) - colors.index(left) - 1


if __name__ == "__main__":
    lc = Solution() 
    print(lc.maxDistance([1,1,1,6,1,1,1]))  # 3
    print(lc.maxDistance([1,8,3,8,3]))      # 4
    print(lc.maxDistance([0,1]))            # 1
    print(lc.maxDistance([4,4,4,11,4,4,11,4,4,4,4,4]))            # 8


# Failed
# Only returns correct answer if first element of list is optimal choice.


#%%


class Solution:
    def maxDistance(self, colors): 
        diff = 0
        left = colors[0] 
        
        for color in colors[1:]:
            if left != colors[-1]:
                return len(colors) - 1           
            else:
                diff = max(diff, color - left)
                left = min(left, color) 
            
        return diff


if __name__ == "__main__":
    lc = Solution() 
    print(lc.maxDistance([1,1,1,6,1,1,1]))                          # 3
    print(lc.maxDistance([1,8,3,8,3]))                              # 4
    print(lc.maxDistance([0,1]))                                    # 1
    print(lc.maxDistance([4,4,4,11,4,4,11,4,4,4,4,4]))              # 8

# Failed

