class Solution:
    def maxDistance(self, colors):
        for idx in range(1, len(colors)):
            if colors[idx] != colors[0]:
                left = idx

        """
        colors = list(reversed(colors))
        for idx in range(1, len(colors)):
            if colors[idx] != colors[0]:
                t2 = idx
        """ 
        
        for idx in range(len(colors) -1, -1, -1):
            if colors[idx] != colors[-1]:
                right = idx
                        
      
        return max(left, len(colors) - 1 - right)


if __name__ == "__main__":
    lc = Solution() 
    print(lc.maxDistance([1,1,1,6,1,1,1]))                          # 3
    print(lc.maxDistance([1,8,3,8,3]))                              # 4
    print(lc.maxDistance([0,1]))                                    # 1
    print(lc.maxDistance([4,4,4,11,4,4,11,4,4,4,4,4]))              # 8

# Runtime: 53 ms, faster than 55.37% of Python3 online submissions for Two Furthest Houses With Different Colors.
# Memory Usage: 13.8 MB, less than 91.79% of Python3 online submissions for Two Furthest Houses With Different Colors.
