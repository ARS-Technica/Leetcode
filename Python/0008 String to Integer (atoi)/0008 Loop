"""
8. String to Integer (atoi)
Medium
https://leetcode.com/problems/string-to-integer-atoi/

Implement the myAtoi(string s) function, which converts a string to a 32-bit
signed integer (similar to C/C++'s atoi function).

The algorithm for myAtoi(string s) is as follows:

Read in and ignore any leading whitespace.
Check if the next character (if not already at the end of the string) is '-' or '+'.
Read this character in if it is either. This determines if the final result is
negative or positive respectively. Assume the result is positive if neither is present.

Read in next the characters until the next non-digit character or the end of
the input is reached. The rest of the string is ignored.
Convert these digits into an integer (i.e. "123" -> 123, "0032" -> 32). If no
digits were read, then the integer is 0. Change the sign as necessary (from step 2).
If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then
clamp the integer so that it remains in the range. Specifically, integers less
than -231 should be clamped to -231, and integers greater than 231 - 1 should
be clamped to 231 - 1.

Return the integer as the final result.

Note:
Only the space character ' ' is considered a whitespace character.
Do not ignore any characters other than the leading whitespace or the rest of
the string after the digits.
"""


class Solution:
    def myAtoi(self, s):
        negative = False
        result = ''
        s = list(s.strip(' '))

        if not s: return 0

        if s[0] == '-':
            negative = True
            s.pop(0)
        elif s[0] == '+':
            s.pop(0)

        for char in s:
            if char.isnumeric():
                result += char
            else:
                # return int(result) if negative == False else -int(result)
                break

        if result:
            result = int(result) if negative == False else -int(result)
        else:
            result = 0

        if result < -2**31:
            return int(-2**31)
        elif result > 2**31 - 1:
            return int(2**31 - 1)
        else:
            return result


if __name__ == "__main__":
    print(Solution().myAtoi(s = "42"))                  # 42
    print(Solution().myAtoi(s = "   -42"))              # -42
    print(Solution().myAtoi(s = "4193 with words"))     # 4193
    print(Solution().myAtoi(s = "words and 987"))       # 0
    print(Solution().myAtoi(s = "-91283472332"))        # -2147483648
    print(Solution().myAtoi(s = ""))                    # 0


# Runtime: 40 ms, faster than 58.19% of Python3 online submissions
# Memory Usage: 13.9 MB, less than 72.67% of Python3 online submissions


#%%


class Solution:
    def myAtoi(self, s):
        maximum = 2147483647
        minimum = -2147483648
        negative = False
        result = ''
        s = list(s.strip())

        if not s: return 0

        if s[0] == '-':
            negative = True
            s.pop(0)
        elif s[0] == '+':
            s.pop(0)

        for char in s:
            if not char.isnumeric():
                break
            else:
                result += char

        if result:
            result = int(result) if negative == False else -int(result)
        else:
            result = 0

        if result < minimum:
            return minimum
        elif result > maximum:
            return maximum
        else:
            return result


if __name__ == "__main__":
    print(Solution().myAtoi(s = "42"))                  # 42
    print(Solution().myAtoi(s = "   -42"))              # -42
    print(Solution().myAtoi(s = "4193 with words"))     # 4193
    print(Solution().myAtoi(s = "words and 987"))       # 0
    print(Solution().myAtoi(s = "-91283472332"))        # -2147483648
    print(Solution().myAtoi(s = ""))                    # 0


# Runtime: 38 ms, faster than 68.66% of Python3 online submissions
# Memory Usage: 13.8 MB, less than 72.67% of Python3 online submissions


#%%


class Solution:
    def myAtoi(self, s):
        maximum = 2147483647
        minimum = -2147483648
        pointer = 0
        result = 0
        sign = 1

        s = s.strip() 
        if not s: return 0

        if s[pointer] == '-':
            sign = -1
            pointer += 1
        elif s[pointer] == '+':
            pointer += 1

        length =  len(s)

        while pointer < length:
            if not s[pointer].isdigit(): break            
            result = result * 10 + ord(s[pointer]) - ord('0')
            if result > maximum: break      # Adding break line reduce Runtime
            pointer += 1

        result = result * sign

        if result < minimum:
            return minimum
        elif result > maximum:
            return maximum
        else:
            return result


if __name__ == "__main__":
    print(Solution().myAtoi(s = "42"))                  # 42
    print(Solution().myAtoi(s = "   -42"))              # -42
    print(Solution().myAtoi(s = "4193 with words"))     # 4193
    print(Solution().myAtoi(s = "words and 987"))       # 0
    print(Solution().myAtoi(s = "-91283472332"))        # -2147483648
    print(Solution().myAtoi(s = ""))                    # 0


# Runtime: 27 ms, faster than 98.34% of Python3 online submissions
# Memory Usage: 13.9 MB, less than 72.67% of Python3 online submissions 


#%%


class Solution:
    def myAtoi(self, s):
        if not s: return 0        

        length = len(s)        
        maximum = 2147483647
        minimum = -2147483648
        pointer = 0
        result = 0
        sign = 1

        while pointer < length:
            if s[pointer] == ' ':
                pointer += 1
            elif s[pointer] == '+':
                pointer += 1
            elif s[pointer] == '-':
                sign = -1
                pointer += 1
            elif s[pointer].isdigit():
                # result = result * 10 + ord(s[pointer]) - ord('0')
                result = result * 10 + int(s[pointer])
                pointer += 1
            elif not s[pointer].isdigit():
                break            
            elif result > maximum:
                break

        result = result * sign

        if result < minimum:
            return minimum
        elif result > maximum:
            return maximum
        else:
            return result


if __name__ == "__main__":
    print(Solution().myAtoi(s = "42"))                  # 42
    print(Solution().myAtoi(s = "   -42"))              # -42
    print(Solution().myAtoi(s = "4193 with words"))     # 4193
    print(Solution().myAtoi(s = "words and 987"))       # 0
    print(Solution().myAtoi(s = "-91283472332"))        # -2147483648
    print(Solution().myAtoi(s = ""))                    # 0
    print(Solution().myAtoi(s = "+-12"))                # 0


# Does not work for s = "+-12" 


#%%


class Solution:
    def myAtoi(self, s):
        mapping = {"1": 1, "2": 2, "3": 3, "4": 4, "5": 5,
                   "6": 6, "7": 7, "8": 8, "9": 9, "0": 0,}

        s = s.lstrip(' ')
        if not s: return 0

        sign = -1 if s[0] == "-" else 1
        if sign != 1 or s[0] == "+": s = s[1:]

        result = 0

        for char in s:
            if char not in mapping:
                return self.limit(result * sign)

            result *= 10
            result += mapping[char]

        return self.limit(result * sign)


    def limit(self, n):
        maximum = 2147483647
        minimum = -2147483648

        if n > maximum:
            return maximum
        if n < minimum:
            return minimum

        return n


if __name__ == "__main__":
    print(Solution().myAtoi(s = "42"))                  # 42
    print(Solution().myAtoi(s = "   -42"))              # -42
    print(Solution().myAtoi(s = "4193 with words"))     # 4193
    print(Solution().myAtoi(s = "words and 987"))       # 0
    print(Solution().myAtoi(s = "-91283472332"))        # -2147483648
    print(Solution().myAtoi(s = ""))                    # 0


# Runtime: 39 ms, faster than 63.73% of Python3 online submissions
# Memory Usage: 13.9 MB, less than 72.67% of Python3 online submissions


#%%


class Solution:
    def myAtoi(self, s):
        mapping = {"1": 1, "2": 2, "3": 3, "4": 4, "5": 5,
                   "6": 6, "7": 7, "8": 8, "9": 9, "0": 0,}

        s = s.lstrip(' ')
        if not s: return 0

        sign = 1

        if s[0] == '-':
            sign = -1
            s = s[1:]
        elif s[0] == '+':
            s = s[1:]

        result = 0

        for char in s:
            if char not in mapping:
                return self.limit(result * sign)

            result *= 10
            result += mapping[char]

        return self.limit(result * sign)


    def limit(self, n):
        maximum = 2147483647
        minimum = -2147483648

        if n > maximum:
            return maximum
        if n < minimum:
            return minimum

        return n


if __name__ == "__main__":
    print(Solution().myAtoi(s = "42"))                  # 42
    print(Solution().myAtoi(s = "   -42"))              # -42
    print(Solution().myAtoi(s = "4193 with words"))     # 4193
    print(Solution().myAtoi(s = "words and 987"))       # 0
    print(Solution().myAtoi(s = "-91283472332"))        # -2147483648
    print(Solution().myAtoi(s = ""))                    # 0


# Runtime: 46 ms, faster than 36.17% of Python3 online submissions
# Memory Usage: 13.8 MB, less than 72.67% of Python3 online submissions


#%%


class Solution:
    def myAtoi(self, s):
        mapping = {"1": 1, "2": 2, "3": 3, "4": 4, "5": 5,
                   "6": 6, "7": 7, "8": 8, "9": 9, "0": 0,}

        s = s.lstrip(' ')
        if not s: return 0

        sign = 1

        if s[0] == '-':
            sign = -1
            s = s[1:]
        elif s[0] == '+':
            s = s[1:]

        result = 0

        for char in s:
            if char not in mapping:
                break

            result *= 10
            result += mapping[char]

        result = result * sign

        maximum = 2147483647
        minimum = -2147483648

        if result > maximum:
            return maximum
        if result < minimum:
            return minimum

        return result


if __name__ == "__main__":
    print(Solution().myAtoi(s = "42"))                  # 42
    print(Solution().myAtoi(s = "   -42"))              # -42
    print(Solution().myAtoi(s = "4193 with words"))     # 4193
    print(Solution().myAtoi(s = "words and 987"))       # 0
    print(Solution().myAtoi(s = "-91283472332"))        # -2147483648
    print(Solution().myAtoi(s = ""))                    # 0


# Runtime: 36 ms, faster than 76.84% of Python3 online submissions
# Memory Usage: 13.9 MB, less than 72.67% of Python3 online submissions


#%%


# Alternative solution. Not mine.
# https://leetcode.com/problems/string-to-integer-atoi/solutions/1688546/python3-5-lines-faster-100-explained/


def myAtoi(self, s: str) -> int:
    length, i, sign, res = len(s), 0, +1, ''
    
    while i < length and s[i] == ' ': i = i + 1
        
    if i < length and s[i] in ('-', '+'): 
        sign, i = -1 if s[i] == '-' else +1, i + 1
        
    while i < length and s[i].isdigit(): 
        res, i = res + s[i], i + 1
    
    return max( -2**31, min( sign * int(res or 0), 2**31 - 1 ) )


if __name__ == "__main__":
    print(Solution().myAtoi(s = "42"))                  # 42
    print(Solution().myAtoi(s = "   -42"))              # -42
    print(Solution().myAtoi(s = "4193 with words"))     # 4193
    print(Solution().myAtoi(s = "words and 987"))       # 0
    print(Solution().myAtoi(s = "-91283472332"))        # -2147483648
    print(Solution().myAtoi(s = ""))                    # 0


# Runtime: 35 ms, faster than 81.54% of Python3 online submissions
# Memory Usage: 13.9 MB, less than 72.67% of Python3 online submissions


#%%
