"""
88. Merge Sorted Array
Easy
https://leetcode.com/problems/merge-sorted-array/

You are given two integer arrays nums1 and nums2, sorted in non-decreasing order,
and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

Merge nums1 and nums2 into a single array sorted in non-decreasing order.

The final sorted array should not be returned by the function, but instead be
stored inside the array nums1. To accommodate this, nums1 has a length of m + n,
where the first m elements denote the elements that should be merged, and the
last n elements are set to 0 and should be ignored. nums2 has a length of n.
"""


class Solution:
    def merge(self, nums1, m, nums2, n):
        """
        Do not return anything, modify nums1 in-place instead.
        """
        # if m == 0: return nums2
        # if n == 0: return nums1

        nums1_insert = m + n - 1
        nums1_right = m - 1
        nums2_right = n - 1

        while nums2_right >= 0:
            if nums1_right >= 0 and nums1[nums1_right] > nums2[nums2_right]:
                nums1[nums1_insert] = nums1[nums1_right]
                nums1_right -= 1
            else:
                nums1[nums1_insert] = nums2[nums2_right]
                nums2_right -= 1

            nums1_insert -= 1

        # print(nums1)


if __name__ == '__main__':
    print(Solution().merge(nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3))              
    # [1,2,2,3,5,6]
    print(Solution().merge(nums1 = [1], m = 1, nums2 = [], n = 0))          
    # [1]
    print(Solution().merge(nums1 = [0], m = 0, nums2 = [1], n = 1))          
    # [1]  


# Runtime: 40 ms, faster than 81.30% of Python3 online submissions
# Memory Usage: 13.9 MB, less than 37.10% of Python3 online submissions


#%%
