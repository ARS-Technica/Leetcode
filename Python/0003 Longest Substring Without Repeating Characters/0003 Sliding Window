"""
3. Longest Substring Without Repeating Characters
Medium
https://leetcode.com/problems/longest-substring-without-repeating-characters/ 

Given a string s, find the length of the longest substring without repeating characters.
"""


class Solution:
    def lengthOfLongestSubstring(self, s): 
        left = 0 
        result = 0
        window = []

        for right in range(len(s)):
            if s[right] in window:
                left += 1
            window.append(s[right])
            result = max(result, len(set(s[left:right])))           
            right += 1

        return result


if __name__ == "__main__":
    print(Solution().lengthOfLongestSubstring(s = "abcabcbb"))             # 3
    print(Solution().lengthOfLongestSubstring(s = "bbbbb"))                # 1
    print(Solution().lengthOfLongestSubstring(s = "pwwkew"))               # 3   


# Incorrect for s = "" 


#%% 


class Solution:
    def lengthOfLongestSubstring(self, s): 
        left = 0
        result = 0
        window = set()

        for right in range(len(s)):
            while s[right] in window:
                window.remove(s[left])
                left += 1
            window.add(s[right])
            result = max(result, right - left + 1)    

        return result


if __name__ == "__main__":
    print(Solution().lengthOfLongestSubstring(s = "abcabcbb"))              # 3
    print(Solution().lengthOfLongestSubstring(s = "bbbbb"))                 # 1
    print(Solution().lengthOfLongestSubstring(s = "pwwkew"))                # 3   
    print(Solution().lengthOfLongestSubstring(s = ""))                      # 0
    print(Solution().lengthOfLongestSubstring(s = "jbpnbwwd"))              # 4

# Runtime: 135 ms, faster than 37.62% of Python3 online submissions for Longest Substring Without Repeating Characters.
# Memory Usage: 14.1 MB, less than 49.64% of Python3 online submissions for Longest Substring Without Repeating Characters.


#%%

# Not mine.
# https://leetcode.com/problems/longest-substring-without-repeating-characters/discuss/1005991/Python.-Cool-and-easy-solution.-O(n)-time.-O(1)-space.


class Solution:
    def lengthOfLongestSubstring(self, s):
        left = 0
        max_len = len(s)
        right = 0
        res = 0
        window = set()

        while right < max_len:
            if s[right] in window:
                window.remove(s[left])
                left += 1
            else:
                window.add(s[right])
                right += 1
                res = max(res, right - left)

        return res

if __name__ == "__main__":
    print(Solution().lengthOfLongestSubstring(s = "abcabcbb"))              # 3
    print(Solution().lengthOfLongestSubstring(s = "bbbbb"))                 # 1
    print(Solution().lengthOfLongestSubstring(s = "pwwkew"))                # 3   
    print(Solution().lengthOfLongestSubstring(s = ""))                      # 0
    print(Solution().lengthOfLongestSubstring(s = "jbpnbwwd"))              # 4


# Runtime: 125 ms, faster than 43.58% of Python3 online submissions for Longest Substring Without Repeating Characters.
# Memory Usage: 14 MB, less than 49.64% of Python3 online submissions for Longest Substring Without Repeating Characters.


#%%

# Alternative solution.  Not mine.
# https://leetcode.com/problems/longest-substring-without-repeating-characters/discuss/2423128/Faster-than-99.5-Python-Solution


from collections import deque

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        substr = deque()
        index = set()
        max_len = 0
        
        for char in s:
            if char not in index:
                substr.append(char)
                index.add(char)
            else:
                while substr:
                    c = substr.popleft()
                    index.remove(c)
                    if c == char:
                        substr.append(char)
                        index.add(char)
                        break
                    
            if len(substr) > max_len:
                max_len = len(substr)

        return max_len


if __name__ == "__main__":
    print(Solution().lengthOfLongestSubstring(s = "abcabcbb"))              # 3
    print(Solution().lengthOfLongestSubstring(s = "bbbbb"))                 # 1
    print(Solution().lengthOfLongestSubstring(s = "pwwkew"))                # 3   
    print(Solution().lengthOfLongestSubstring(s = ""))                      # 0
    print(Solution().lengthOfLongestSubstring(s = "jbpnbwwd"))              # 4


# Runtime: 115 ms, faster than 51.17% of Python3 online submissions for Longest Substring Without Repeating Characters.
# Memory Usage: 14.1 MB, less than 13.81% of Python3 online submissions for Longest Substring Without Repeating Characters.


#%%

# Not mine.
# https://leetcode.com/problems/longest-substring-without-repeating-characters/discuss/1005991/Python.-Cool-and-easy-solution.-O(n)-time.-O(1)-space.


class Solution:
    def lengthOfLongestSubstring(self, s):
        left = 0
        max_len = len(s)
        right = 0
        res = 0
        window = set()

        while right < max_len:
            if s[right] in window:
                window.remove(s[left])
                left += 1
            else:
                window.add(s[right])
                right += 1
                res = max(res, right - left)

        return res


if __name__ == "__main__":
    print(Solution().lengthOfLongestSubstring(s = "abcabcbb"))              # 3
    print(Solution().lengthOfLongestSubstring(s = "bbbbb"))                 # 1
    print(Solution().lengthOfLongestSubstring(s = "pwwkew"))                # 3   
    print(Solution().lengthOfLongestSubstring(s = ""))                      # 0
    print(Solution().lengthOfLongestSubstring(s = "jbpnbwwd"))              # 4


# Runtime: 73 ms, faster than 86.25% of Python3 online submissions for Longest Substring Without Repeating Characters.
# Memory Usage: 14 MB, less than 93.03% of Python3 online submissions for Longest Substring Without Repeating Characters.


#%%

