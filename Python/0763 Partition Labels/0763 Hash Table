"""
763. Partition Labels
Medium
https://leetcode.com/problems/partition-labels/ 

You are given a string s. We want to partition the string into as many parts
as possible so that each letter appears in at most one part.

Note that the partition is done so that after concatenating all the parts in
order, the resultant string should be s.

Return a list of integers representing the size of these parts.
"""


# Start by creating a list of indexes at which each character appears

class Solution:
    def partitionLabels(self, s):
        indexes = dict()
        result = []

        for idx, letter in enumerate(s):
            if letter in indexes:
                indexes[letter].append(idx)
            else:
                indexes[letter] = [idx]

        print(indexes)


if __name__ == '__main__':
    print(Solution().partitionLabels(s = "ababcbacadefegdehijhklij"))       # [9,7,8]
    # {'a': [0, 2, 6, 8], 'b': [1, 3, 5], 'c': [4, 7], 'd': [9, 14], 'e': [10, 12, 15], 
    # 'f': [11], 'g': [13], 'h': [16, 19], 'i': [17, 22], 'j': [18, 23], 'k': [20], 'l': [21]}

    print(Solution().partitionLabels(s = "eccbbbbdec"))                     # [10]
    # {'e': [0, 8], 'c': [1, 2, 9], 'b': [3, 4, 5, 6], 'd': [7]}


#%%

# Merge the hash table into a list of intervals


class Solution:
    def partitionLabels(self, s):    
        indexes = dict()
        result = []

        for idx, letter in enumerate(s):
            if letter in indexes:
                indexes[letter].append(idx)
            else:
                indexes[letter] = [idx]

        intervals = [[min(i), max(i)] for i in list(indexes.values())]

        # Solution to problem 56. Merge Intervals.
        intervals = sorted(intervals, key = lambda x: x[0]) 

        start, stop = intervals[0]

        for next_start, next_stop in intervals[1:]:
            if stop < next_start:               # If there's no overlap
                result.append([start, stop])
                start, stop = next_start, next_stop
            else:
                stop = max(stop, next_stop)     # Find the highest number

        result.append([start, stop])

        return result


if __name__ == '__main__':
    print(Solution().partitionLabels(s = "ababcbacadefegdehijhklij"))       # [9,7,8]
    # [[0, 8], [9, 15], [16, 23]]
    
    print(Solution().partitionLabels(s = "eccbbbbdec"))                     # [10]
    # [[0, 9]]


#%%
