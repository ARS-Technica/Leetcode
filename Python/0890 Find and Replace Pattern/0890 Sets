"""
890. Find and Replace Pattern
Medium
https://leetcode.com/problems/find-and-replace-pattern/description/

Given a list of strings words and a string pattern, return a list of words[i]
that match pattern. You may return the answer in any order.

A word matches the pattern if there exists a permutation of letters p so that
after replacing every letter x in the pattern with p(x), we get the desired word.

Recall that a permutation of letters is a bijection from letters to letters:
every letter maps to another letter, and no two letters map to the same letter.
"""


# Not mine.
# https://leetcode.com/problems/find-and-replace-pattern/solutions/3068350/python3-solution-using-205-isomorphic-strings/


class Solution:
    def findAndReplacePattern(self, words, pattern):
        result = []

        for word in words:
            if len(set(zip(word, pattern))) == len(set(word)) == len(set(pattern)):
                result.append(word)

        return result


if __name__ == '__main__':
    print(Solution().findAndReplacePattern(words = ["abc","deq","mee","aqq","dkd","ccc"], pattern = "abb"))
    # ["mee","aqq"]
    print(Solution().findAndReplacePattern(words = ["a","b","c"], pattern = "a"))
    # ["a","b","c"]


# Runtime: 33 ms, faster than 84.63% of Python3 online submissions
# Memory Usage: 13.9 MB, less than 70.20% of Python3 online submissions


#%%


class Solution:
    def findAndReplacePattern(self, words, pattern):
        return [i for i in words if len(set(zip(i, pattern))) == len(set(i)) == len(set(pattern))]


if __name__ == '__main__':
    print(Solution().findAndReplacePattern(words = ["abc","deq","mee","aqq","dkd","ccc"], pattern = "abb"))
    # ["mee","aqq"]
    print(Solution().findAndReplacePattern(words = ["a","b","c"], pattern = "a"))
    # ["a","b","c"]


# Runtime: 33 ms, faster than 84.63% of Python3 online submissions
# Memory Usage: 13.9 MB, less than 23.40% of Python3 online submissions


#%%
