"""
452. Minimum Number of Arrows to Burst Balloons
Medium
https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/

There are some spherical balloons taped onto a flat wall that represents the XY-plane.
The balloons are represented as a 2D integer array points where points[i] = [xstart, xend]
denotes a balloon whose horizontal diameter stretches between xstart and xend.
You do not know the exact y-coordinates of the balloons.

Arrows can be shot up directly vertically (in the positive y-direction) from
different points along the x-axis. A balloon with xstart and xend is burst by
an arrow shot at x if xstart <= x <= xend. There is no limit to the number of
arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting
any balloons in its path.

Given the array points, return the minimum number of arrows that must be shot
to burst all balloons.
"""


class Solution:
    def findMinArrowShots(self, points):
        points.sort(key=lambda i: i[1])
        previous_end = points[0][1]
        result = 1

        for start, end in points:
            if start > previous_end:
                previous_end = end
                result += 1

        return result


if __name__ == '__main__':
    print(Solution().findMinArrowShots(points = [[10,16],[2,8],[1,6],[7,12]]))              # 2
    print(Solution().findMinArrowShots(points = [[1,2],[3,4],[5,6],[7,8]]))                 # 4
    print(Solution().findMinArrowShots(points = [[1,2],[2,3],[3,4],[4,5]]))                 # 2


# Runtime: 3960 ms, faster than 6.60% of Python3 online submissions for Minimum Number of Arrows to Burst Balloons.
# Memory Usage: 59.9 MB, less than 69.86% of Python3 online submissions for Minimum Number of Arrows to Burst Balloons.


#%%


class Solution:
    def findMinArrowShots(self, points):
        # points.sort(key=lambda i: i[1])
        points = sorted(points, key=lambda i: i[1])
        previous_end = points[0][1]
        result = 1

        for start, end in points:
            if start > previous_end:
                previous_end = end
                result += 1

        return result


if __name__ == '__main__':
    print(Solution().findMinArrowShots(points = [[10,16],[2,8],[1,6],[7,12]]))              # 2
    print(Solution().findMinArrowShots(points = [[1,2],[3,4],[5,6],[7,8]]))                 # 4
    print(Solution().findMinArrowShots(points = [[1,2],[2,3],[3,4],[4,5]]))                 # 2


# Runtime: 3024 ms, faster than 50.44% of Python3 online submissions for Minimum Number of Arrows to Burst Balloons.
# Memory Usage: 59.9 MB, less than 34.51% of Python3 online submissions for Minimum Number of Arrows to Burst Balloons.


#%% 
