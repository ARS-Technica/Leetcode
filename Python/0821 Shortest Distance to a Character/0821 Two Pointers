"""
821. Shortest Distance to a Character
Easy
https://leetcode.com/problems/shortest-distance-to-a-character/ 

Given a string s and a character c that occurs in s, return an array of integers
answer where answer.length == s.length and answer[i] is the distance from index
i to the closest occurrence of character c in s.

The distance between two indices i and j is abs(i - j), where abs is the absolute
value function.

Constraints:

1 <= s.length <= 104
s[i] and c are lowercase English letters.
It is guaranteed that c occurs at least once in s.
"""


class Solution:
    def shortestToChar(self, s, c):
        left = 0
        right = s.index(c)
        
        target = 0
        res = []
        
        while left < len(s):
            if left < right:
                res.append(abs(right - left))
                left += 1
            elif left == right:
                res.append(abs(right - left))
                left += 1 
                while right < len(s) and s[right] != c:
                    right += 1
            else:  #elif left > right:
                while left < len(s):
                    res.append(abs(right - left))
                    left += 1
                    
        return res             


if __name__ == "__main__":
    lc = Solution() 
    print(lc.shortestToChar(s = "loveleetcode", c = "e"))       # [3,2,1,0,1,0,0,1,2,2,1,0]
    print(lc.shortestToChar(s = "aaab", c = "b"))               # [3,2,1,0] 


# Failed for left values to the right of final index of c
# [3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8]
# [3, 2, 1, 0]


#%%

"""
This time, I tried enumerating the indexes of c
"""


class Solution:
    def shortestToChar(self, s, c):
        i = 0
        j = 0
        res = []
        targets = [idx for idx, elem in enumerate(s) if elem == c]
        
        while i < len(s):
            if i < targets[j]:
                res.append(abs(i - targets[j]))
                i += 1
            elif i == targets[j]: 
                res.append(abs(i - targets[j]))
                i += 1
                if j < len(targets):
                    j += 1
            else:   #elif i > targets[j]
                while left < len(s):
                    res.append(abs(i - targets[j]))
                    left += 1             
                res.append(abs(i - targets[j]))
                i += 1               
            
        return res
 

if __name__ == "__main__":
    lc = Solution() 
    print(lc.shortestToChar(s = "loveleetcode", c = "e"))       # [3,2,1,0,1,0,0,1,2,2,1,0]
    print(lc.shortestToChar(s = "aaab", c = "b"))               # [3,2,1,0] 


# Failed again for left values to the right of final index of c
# [3, 2, 1, 0, 1, 0, 0, 4, 3, 2, 1, 0]
# [3, 2, 1, 0]


#%%

"""
Used conditionals to check which side of J the index is on, 
so that I can take the minimum value.

Also remembered not to run J past the length of targets.
"""


class Solution:
    def shortestToChar(self, s, c):
        i = 0
        j = 0
        res = []
        targets = [idx for idx, elem in enumerate(s) if elem == c]
        
        while i < len(s): 
            if i < targets[j]:
                if j > 0:
                    res.append(min(abs(i - targets[j]), abs(i - targets[j-1])))
                else:
                    res.append(abs(i - targets[j]))
                i += 1
            elif i == targets[j]: 
                if j > 0:
                    res.append(min(abs(i - targets[j]), abs(i - targets[j-1])))
                else:
                    res.append(abs(i - targets[j]))
                i += 1
                if j < len(targets)-1:
                    j += 1
                else:
                    pass
            else:   #elif i > targets[j]
                while i < len(s):
                    if j > 0:
                        res.append(min(abs(i - targets[j]), abs(i - targets[j-1])))
                    else:
                        res.append(abs(i - targets[j]))
                    i += 1            
           
        return res
 

if __name__ == "__main__":
    lc = Solution() 
    print(lc.shortestToChar(s = "loveleetcode", c = "e"))       # [3,2,1,0,1,0,0,1,2,2,1,0]
    print(lc.shortestToChar(s = "aaab", c = "b"))               # [3,2,1,0] 
    print(lc.shortestToChar(s = "aaba", c = "b"))               # 


# Runtime: 39 ms, faster than 95.59% of Python3 online submissions for Shortest Distance to a Character.
# Memory Usage: 14 MB, less than 57.72% of Python3 online submissions for Shortest Distance to a Character.


#%%
