"""
821. Shortest Distance to a Character
Easy
https://leetcode.com/problems/shortest-distance-to-a-character/ 

Given a string s and a character c that occurs in s, return an array of integers
answer where answer.length == s.length and answer[i] is the distance from index
i to the closest occurrence of character c in s.

The distance between two indices i and j is abs(i - j), where abs is the absolute
value function.

Constraints:

1 <= s.length <= 104
s[i] and c are lowercase English letters.
It is guaranteed that c occurs at least once in s.
"""


# Not mine.
# https://leetcode.com/problems/shortest-distance-to-a-character/discuss/1090998/2-line-python-solution


class Solution:
    def shortestToChar(self, s, c):
        ids = [i for i in range(len(s)) if s[i] == c]
        return [min([abs(i-id_) for id_ in ids]) for i in range(len(s))]        
 

if __name__ == "__main__":
    lc = Solution() 
    print(lc.shortestToChar(s = "loveleetcode", c = "e"))       # [3,2,1,0,1,0,0,1,2,2,1,0]
    print(lc.shortestToChar(s = "aaab", c = "b"))               # [3,2,1,0] 
    print(lc.shortestToChar(s = "aaba", c = "b"))               # 


# Runtime: 68 ms, faster than 55.51% of Python3 online submissions for Shortest Distance to a Character.
# Memory Usage: 13.8 MB, less than 92.68% of Python3 online submissions for Shortest Distance to a Character.


#%%

# Not mine.
# https://leetcode.com/problems/shortest-distance-to-a-character/discuss/1064178/Python-2-Liner-Easy-to-Understand


class Solution:
    def shortestToChar(self, s, c):
        presentIndexes = [ i for i, val in enumerate(s) if val == c ]
        return [min(abs(i - x) for x in presentIndexes) for i in range(0, len(s))]      
 

if __name__ == "__main__":
    lc = Solution() 
    print(lc.shortestToChar(s = "loveleetcode", c = "e"))       # [3,2,1,0,1,0,0,1,2,2,1,0]
    print(lc.shortestToChar(s = "aaab", c = "b"))               # [3,2,1,0] 
    print(lc.shortestToChar(s = "aaba", c = "b"))               # 


# Runtime: 73 ms, faster than 48.66% of Python3 online submissions for Shortest Distance to a Character.
# Memory Usage: 13.8 MB, less than 92.68% of Python3 online submissions for Shortest Distance to a Character.

