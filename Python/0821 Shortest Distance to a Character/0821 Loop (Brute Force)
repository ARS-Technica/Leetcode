"""
821. Shortest Distance to a Character
Easy
https://leetcode.com/problems/shortest-distance-to-a-character/ 

Given a string s and a character c that occurs in s, return an array of integers
answer where answer.length == s.length and answer[i] is the distance from index
i to the closest occurrence of character c in s.

The distance between two indices i and j is abs(i - j), where abs is the absolute
value function.

Constraints:

1 <= s.length <= 104
s[i] and c are lowercase English letters.
It is guaranteed that c occurs at least once in s.
"""


class Solution:
    def shortestToChar(self, s, c):
        res = []
        target = [] 
        
        for idx in range(len(s)):
            if s[idx] == c:
                target.append(idx)                
        
        for idx in range(len(s)):
            mn = len(s)
            
            for n in target:                
                mn = min(mn, abs(idx - n)) 
                
            res.append(mn)
            
        return res 


if __name__ == "__main__":
    lc = Solution() 
    print(lc.shortestToChar(s = "loveleetcode", c = "e"))       # [3,2,1,0,1,0,0,1,2,2,1,0]
    print(lc.shortestToChar(s = "aaab", c = "b"))               # [3,2,1,0] 
    print(lc.shortestToChar(s = "aaba", c = "b"))               # [2, 1, 0, 1]


# Runtime: 114 ms, faster than 19.69% of Python3 online submissions for Shortest Distance to a Character.
# Memory Usage: 13.9 MB, less than 57.72% of Python3 online submissions for Shortest Distance to a Character.

