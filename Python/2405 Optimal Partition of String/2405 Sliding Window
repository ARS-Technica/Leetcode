"""
2405. Optimal Partition of String
Medium
https://leetcode.com/problems/optimal-partition-of-string/

Given a string s, partition the string into one or more substrings such that
the characters in each substring are unique. That is, no letter appears in a
single substring more than once.

Return the minimum number of substrings in such a partition.

Note that each character should belong to exactly one substring in a partition.
"""


class Solution:
    def partitionString(self, s):
        def checkDuplicates(s):
            return len(set(s)) == len(s)        

        left = 0
        result = 0

        for right in range(1, len(s)+1):
            if not checkDuplicates(s[left:right]):
                result += 1
                left = right-1

        return result + 1


if __name__ == '__main__':
    print(Solution().partitionString(s = "abacaba"))            # 4
    print(Solution().partitionString(s = "ssssss"))             # 6


# Runtime: 916 ms, faster than 5.27% of Python3 online submissions for Optimal Partition of String.
# Memory Usage: 14.6 MB, less than 54.12% of Python3 online submissions for Optimal Partition of String.


#%%
