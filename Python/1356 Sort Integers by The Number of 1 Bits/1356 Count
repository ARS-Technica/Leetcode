"""
Working my way through a list of Bit Manipulation problems, my first instinct was to a bit operator to check the Hamming Weight of each item in the array.  
However, after problems 338, "Counting Bits," and 762, "Prime Number of Set Bits in Binary Representation," I've learned that Bit Manipulation doesn't improve
perform much beyond a simple conversion and count.  The only question in my mind was how to sort the number after their conversion.  It turns out that my 
instincts were exactly the reverse of what was most effective, and my answers became less efficent as they went.
"""


class Solution:
    def sortByBits(self, arr):
        arr.sort(key=lambda x: (bin(x).count("1"), x))
        return arr
     

if __name__ == "__main__":
    lc = Solution() 
    print(lc.sortByBits([0,1,2,3,4,5,6,7,8]))                       # [0,1,2,4,8,3,5,6,7]
    print(lc.sortByBits([1024,512,256,128,64,32,16,8,4,2,1]))       # [1,2,4,8,16,32,64,128,256,512,1024] 
    print(lc.sortByBits([10,100,1000,10000]))                       # [10,100,1000,10000]

# Runtime: 113 ms, faster than 39.84% of Python3 online submissions for Sort Integers by The Number of 1 Bits.
# Memory Usage: 14.3 MB, less than 29.55% of Python3 online submissions for Sort Integers by The Number of 1 Bits.
    

#%%


class Solution:
    def sortByBits(self, arr):
        arr.sort()
        return sorted(arr, key = lambda x:bin(x).count('1'))
     

if __name__ == "__main__":
    lc = Solution() 
    print(lc.sortByBits([0,1,2,3,4,5,6,7,8]))                       # [0,1,2,4,8,3,5,6,7]
    print(lc.sortByBits([1024,512,256,128,64,32,16,8,4,2,1]))       # [1,2,4,8,16,32,64,128,256,512,1024] 
    print(lc.sortByBits([10,100,1000,10000]))                       # [10,100,1000,10000]

# Runtime: 114 ms, faster than 38.52% of Python3 online submissions for Sort Integers by The Number of 1 Bits.
# Memory Usage: 14.1 MB, less than 51.98% of Python3 online submissions for Sort Integers by The Number of 1 Bits.


#%%


class Solution:
    def sortByBits(self, arr):
        return sorted(arr, key = lambda x: (bin(x).count('1'), x))


if __name__ == "__main__":
    lc = Solution() 
    print(lc.sortByBits([0,1,2,3,4,5,6,7,8]))                       # [0,1,2,4,8,3,5,6,7]
    print(lc.sortByBits([1024,512,256,128,64,32,16,8,4,2,1]))       # [1,2,4,8,16,32,64,128,256,512,1024] 
    print(lc.sortByBits([10,100,1000,10000]))                       # [10,100,1000,10000]

# Runtime: 115 ms, faster than 37.55% of Python3 online submissions for Sort Integers by The Number of 1 Bits.
# Memory Usage: 14.2 MB, less than 51.98% of Python3 online submissions for Sort Integers by The Number of 1 Bits.
    

#%%


