"""
1356. Sort Integers by The Number of 1 Bits
Easy
https://leetcode.com/problems/sort-integers-by-the-number-of-1-bits/ 

You are given an integer array arr. Sort the integers in the array in ascending 
order by the number of 1's in their binary representation and in case of two or 
more integers have the same number of 1's you have to sort them in ascending order.

Return the array after sorting it.
"""


class Solution:
    def sortByBits(self, arr):
        hamming = {}
        
        for i in arr:            
            # Hamming Weight Solution to Problem 191: Number of 1 Bits
            ham = 0
            temp = i
            while i:
                i &= i - 1
                ham += 1
            
            if ham in hamming:
                hamming[ham].append(temp)                
            else:
                hamming[ham] = [temp]

        # print(hamming)
        # Return a list of dictionary values as a list of lists
        # res = [value for key, value in hamming.items()]
        # flatten a list of lists
        # flat = [i for j in res for i in j] 
        # sorted values so lists sharing a hamming value appear in ascending order
        # Sorted dictionary to ensure keys are sorted in ascending order
        return [i for j in [sorted(value) for key, value in sorted(hamming.items())] for i in j]
    

if __name__ == "__main__":
    lc = Solution() 
    print(lc.sortByBits([0,1,2,3,4,5,6,7,8]))                       # [0,1,2,4,8,3,5,6,7]
    print(lc.sortByBits([1024,512,256,128,64,32,16,8,4,2,1]))       # [1,2,4,8,16,32,64,128,256,512,1024] 
    print(lc.sortByBits([10,100,1000,10000]))                       # [10,100,1000,10000]

# Runtime: 113 ms, faster than 39.84% of Python3 online submissions for Sort Integers by The Number of 1 Bits.
# Memory Usage: 14.3 MB, less than 29.55% of Python3 online submissions for Sort Integers by The Number of 1 Bits.
    
