
# Not mine.
# https://leetcode.com/problems/implement-strstr/discuss/13237/Java-and-Python-solution-using-KMP-with-O(m-%2B-n)-time-complexity

"""
The time complexity for this solution should be O(m + n). First of all, we generate the "next" array to show any possible duplicates of prefix and postfix within needle. Then we go through haystack. Every time we see a bad match, move j to next[j] and keep i in current position; otherwise, move both of them to next position.
Python version:
"""


class Solution:
    def strStr(self, haystack, needle):
        if haystack == None or needle == None:
            return -1
        #generate next array, need O(n) time
        i, j, m, n = -1, 0, len(haystack), len(needle)
        next = [-1] * n
        while j < n - 1:  
            #needle[k] stands for prefix, neelde[j] stands for postfix
            if i == -1 or needle[i] == needle[j]:   
                i, j = i + 1, j + 1
                next[j] = i
            else:
                i = next[i]
            #print(i,j,next[i],next[j])
        #check through the haystack using next, need O(m) time
        i = j = 0
        while i < m and j < n:
            if j == -1 or haystack[i] == needle[j]:
                i, j = i + 1, j + 1
            else:
                j = next[j]
        if j == n:
            return i - j
        return -1
 

if __name__ == "__main__":
    lc = Solution() 
    print(lc.strStr(haystack = "hello", needle = "ll"))                 # 2
    print(lc.strStr(haystack = "aaaaa", needle = "bba"))                # -1 
    print(lc.strStr(haystack = "aaa", needle = "aaaa"))                 # -1 
    print(lc.strStr(haystack = "mississippi", needle = "issip" ))       # 4


# Runtime: 65 ms, faster than 55.88% of Python3 online submissions for Implement strStr().
# Memory Usage: 13.9 MB, less than 94.12% of Python3 online submissions for Implement strStr().

