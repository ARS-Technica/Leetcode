"""
1027. Longest Arithmetic Subsequence
Medium
https://leetcode.com/problems/longest-arithmetic-subsequence/ 

Given an array nums of integers, return the length of the longest arithmetic subsequence in nums.

Recall that a subsequence of an array nums is a list nums[i1], nums[i2], ..., 
nums[ik] with 0 <= i1 < i2 < ... < ik <= nums.length - 1, and that a sequence 
seq is arithmetic if seq[i+1] - seq[i] are all the same value (for 0 <= i < seq.length - 1).
"""


class Solution:
    def longestArithSeqLength(self, nums):
        asc = []
        des = []
        
        for idx in range(1, len(nums)):
            if (nums[idx] - nums[idx-1]) < (nums[idx-1] - nums[idx]):
                asc.append(nums[idx-1])
            else:
                des.append(nums[idx-1])
                
        return max(len(asc), len(des)) + 1

 

if __name__ == "__main__":
    lc = Solution() 
    print(lc.longestArithSeqLength([3,6,9,12]))                     # 4
    print(lc.longestArithSeqLength([9,4,7,2,10]))                   # 3
    print(lc.longestArithSeqLength([20,1,15,3,10,5,8]))             # 4
    print(lc.longestArithSeqLength([83,20,17,43,52,78,68,45]))      # 2
