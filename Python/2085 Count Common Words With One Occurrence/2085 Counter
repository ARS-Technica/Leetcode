"""
2085. Count Common Words With One Occurrence
Easy
https://leetcode.com/problems/count-common-words-with-one-occurrence/description/ 

Given two string arrays words1 and words2, return the number of strings that
appear exactly once in each of the two arrays.
"""


from collections import Counter


class Solution:
    def countWords(self, words1, words2):
        words1_freq = Counter(words1)
        words2_freq = Counter(words2)

        words1_uniq = [word for word, count in words1_freq.items() if count == 1]        
        words2_uniq = [word for word, count in words2_freq.items() if count == 1]

        result = len([word for word in words1_uniq if word in words2_uniq])

        return result


if __name__ == '__main__':
    print(Solution().countWords(words1 = ["leetcode","is","amazing","as","is"], words2 = ["amazing","leetcode","is"]))    
    # 2
    print(Solution().countWords(words1 = ["b","bb","bbb"], words2 = ["a","aa","aaa"]))          
    # 0
    print(Solution().countWords(words1 = ["a","ab"], words2 = ["a","a","a","ab"]))          
    # 1


# Runtime: 114 ms, faster than 71.38% of Python3 online submissions
# Memory Usage: 14.5 MB, less than 36.6% of Python3 online submissions


#%%


from collections import Counter


class Solution:
    def countWords(self, words1, words2):
        words1_uniq = [word for word, count in Counter(words1).items() if count == 1]        
        words2_uniq = [word for word, count in Counter(words2).items() if count == 1]

        result = len([word for word in words1_uniq if word in words2_uniq])

        return result


if __name__ == '__main__':
    print(Solution().countWords(words1 = ["leetcode","is","amazing","as","is"], words2 = ["amazing","leetcode","is"]))    
    # 2
    print(Solution().countWords(words1 = ["b","bb","bbb"], words2 = ["a","aa","aaa"]))          
    # 0
    print(Solution().countWords(words1 = ["a","ab"], words2 = ["a","a","a","ab"]))          
    # 1


# Runtime: 123 ms, faster than 66.77% of Python3 online submissions
# Memory Usage: 14.5 MB, less than 6.29% of Python3 online submissions


#%%


from collections import Counter


class Solution:
    def countWords(self, words1, words2):
        words1_uniq = set([word for word, count in Counter(words1).items() if count == 1])
        words2_uniq = set([word for word, count in Counter(words2).items() if count == 1])
        result = len(words1_uniq & words2_uniq)

        return result


if __name__ == '__main__':
    print(Solution().countWords(words1 = ["leetcode","is","amazing","as","is"], words2 = ["amazing","leetcode","is"]))    
    # 2
    print(Solution().countWords(words1 = ["b","bb","bbb"], words2 = ["a","aa","aaa"]))          
    # 0
    print(Solution().countWords(words1 = ["a","ab"], words2 = ["a","a","a","ab"]))          
    # 1


# Runtime: 68 ms, faster than 94.24% of Python3 online submissions
# Memory Usage: 14.5 MB, less than 36.6% of Python3 online submissions


#%%
