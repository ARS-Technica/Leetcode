"""
922. Sort Array By Parity II
Easy
https://leetcode.com/problems/sort-array-by-parity-ii/ 

Given an array of integers nums, half of the integers in nums are odd, and the other half are even.

Sort the array so that whenever nums[i] is odd, i is odd, and whenever nums[i] is even, i is even.

Return any answer array that satisfies this condition.
"""


class Solution:
    def sortArrayByParityII(self, nums):
        evens = [n for n in nums if n % 2 == 0]
        odds = [n for n in nums if n % 2 != 0]
        res = [j for i in zip(evens, odds) for j in i]
        return res


if __name__ == "__main__":
    lc = Solution() 
    print(lc.sortArrayByParityII(nums = [4,2,5,7]))         # [4,5,2,7]
    print(lc.sortArrayByParityII(nums = [2,3]))             # [2,3] 


# Runtime: 206 ms, faster than 94.97% of Python3 online submissions for Sort Array By Parity II.
# Memory Usage: 16.7 MB, less than 21.24% of Python3 online submissions for Sort Array By Parity II.


#%%


class Solution:
    def sortArrayByParityII(self, nums):
        return [j for i in zip([n for n in nums if n % 2 == 0], [n for n in nums if n % 2 != 0]) for j in i] 


if __name__ == "__main__":
    lc = Solution() 
    print(lc.sortArrayByParityII(nums = [4,2,5,7]))         # [4,5,2,7]
    print(lc.sortArrayByParityII(nums = [2,3]))             # [2,3] 


# Runtime: 214 ms, faster than 87.14% of Python3 online submissions for Sort Array By Parity II.
# Memory Usage: 16.7 MB, less than 21.24% of Python3 online submissions for Sort Array By Parity II.

