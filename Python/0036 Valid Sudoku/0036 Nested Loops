

# Without DefaultDicts
# Inspired by https://leetcode.com/problems/valid-sudoku/solutions/312692/python-east-to-understand/


class Solution:
    def check_row(self, board):
        for row in range(0, 9):
            cell = ""
            for column in range(0, 9):                
                if board[row][column] not in cell:
                    cell += board[row][column]
                elif board[row][column].isnumeric():
                    return False
        return True


    def check_column(self, board):
        for column in range(0, 9):
            cell = ""
            for row in range(0, 9):                
                if board[row][column] not in cell:
                    cell += board[row][column]
                elif board[row][column].isnumeric():
                    return False

        return True


    def check_grid(self, board):
        for column in range(0, 9, 3):
            for row in range(0, 9, 3):
                cell = ""
                for i in range(column, column + 3):
                    for j in range(row, row + 3):
                        if board[i][j] not in cell:
                            cell += board[i][j]
                        elif board[i][j].isnumeric():
                            return False

        return True


    def isValidSudoku(self, board):
        if self.check_row(board) and self.check_column(board) and self.check_grid(board):
            return True
        return False


if __name__ == '__main__':
    print(Solution().isValidSudoku(board = 
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]))              # True

    print(Solution().isValidSudoku(board = 
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]))               # False 

    print(Solution().isValidSudoku(board =
[[".",".",".",".","5",".",".","1","."]
 ,[".","4",".","3",".",".",".",".","."]
 ,[".",".",".",".",".","3",".",".","1"]
 ,["8",".",".",".",".",".",".","2","."]
 ,[".",".","2",".","7",".",".",".","."]
 ,[".","1","5",".",".",".",".",".","."]
 ,[".",".",".",".",".","2",".",".","."]
 ,[".","2",".","9",".",".",".",".","."]
 ,[".",".","4",".",".",".",".",".","."]]))               # False 


# Runtime: 85 ms, faster than 99.64% of Python3 online submissions
# Memory Usage: 13.9 MB, less than 34.65% of Python3 online submissions


#%%


# Not mine.
# https://leetcode.com/problems/valid-sudoku/solutions/422232/8-lines-python3-solution-using-set-100-ms-faster-than-98-30/


class Solution:
    def isValidSudoku(self, board):
        row = [[False] * 9 for _ in range(9)]
        col = [[False] * 9 for _ in range(9)]
        sub = [[False] * 9 for _ in range(9)]

        for i in range(9):
            for j in range(9):
                c = board[i][j]

                if c == '.':
                    continue
                num = int(c) - 1
                k = i // 3 * 3 + j // 3

                if row[i][num] or col[j][num] or sub[k][num]:
                    return False
                row[i][num] = True
                col[j][num] = True
                sub[k][num] = True

        return True


if __name__ == '__main__':
    print(Solution().isValidSudoku(board = 
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]))              # True

    print(Solution().isValidSudoku(board = 
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]))               # False 

    print(Solution().isValidSudoku(board =
[[".",".",".",".","5",".",".","1","."]
 ,[".","4",".","3",".",".",".",".","."]
 ,[".",".",".",".",".","3",".",".","1"]
 ,["8",".",".",".",".",".",".","2","."]
 ,[".",".","2",".","7",".",".",".","."]
 ,[".","1","5",".",".",".",".",".","."]
 ,[".",".",".",".",".","2",".",".","."]
 ,[".","2",".","9",".",".",".",".","."]
 ,[".",".","4",".",".",".",".",".","."]]))               # False 


# Runtime: 100 ms, faster than 87.87% of Python3 online submissions
# Memory Usage: 13.8 MB, less than 82.64% of Python3 online submissions


#%%
