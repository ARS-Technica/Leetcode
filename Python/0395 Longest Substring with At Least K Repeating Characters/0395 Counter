"""
395. Longest Substring with At Least K Repeating Characters
Medium
https://leetcode.com/problems/longest-substring-with-at-least-k-repeating-characters/ 

Given a string s and an integer k, return the length of the longest substring
of s such that the frequency of each character in this substring is greater
than or equal to k.
"""


from collections import Counter


class Solution:
    def longestSubstring(self, s, k):
        frequency = Counter(s) 
        insufficent = set(key for key, count in frequency.items() if count < k)
        sufficent = ''.join(('0' if char in insufficent else char for char in s)) 
        substrings = (len(chars) for chars in list(sufficent.split('0'))) 
        return max(substrings)


if __name__ == '__main__':
    print(Solution().longestSubstring(s = "aaabb", k = 3))                  # 3
    print(Solution().longestSubstring(s = "ababbc", k = 2))                 # 5
    print(Solution().longestSubstring(s = "ababacb", k = 3))                # 0


# Doesn't work for s = "ababacb" 


#%%


# Not mine.
# https://leetcode.com/problems/longest-substring-with-at-least-k-repeating-characters/solutions/1601863/recursive-8-lines-codes/


from collections import Counter


class Solution:
    def longestSubstring(self, s, k):
        if not s or len(s) < k: return 0 

        for char in set(s):
            if s.count(char) < k:
                return max([self.longestSubstring(substring, k) for substring in s.split(char)])

        return len(s)



if __name__ == '__main__':
    print(Solution().longestSubstring(s = "aaabb", k = 3))                   # 3
    print(Solution().longestSubstring(s = "ababbc", k = 2))                  # 5
    print(Solution().longestSubstring(s = "ababacb", k = 3))                # 0


# Runtime: 61 ms, faster than 77.82% of Python3 online submissions 
# Memory Usage: 13.9 MB, less than 90.65% of Python3 online submissions 


#%%


# Not mine.
# https://leetcode.com/problems/longest-substring-with-at-least-k-repeating-characters/solutions/1215967/split-string-by-eliminating-less-frequent-characters-99-8-speed/


from collections import Counter


class Solution:
    def longestSubstring(self, s, k):
        max_len = 0
        lst = [s]

        while lst:
            new_lst = []

            for sub_s in lst:
                new_sub = sub_s
                for c, n in Counter(new_sub).items():
                    if n < k:
                        new_sub = new_sub.replace(c, "#")

                for new_s in new_sub.split("#"):
                    if new_s:
                        if min(Counter(new_s).values()) >= k:
                            max_len = max(max_len, len(new_s))
                        elif len(new_s) >= k:
                            new_lst.append(new_s)

            lst = new_lst
        return max_len


if __name__ == '__main__':
    print(Solution().longestSubstring(s = "aaabb", k = 3))                   # 3
    print(Solution().longestSubstring(s = "ababbc", k = 2))                  # 5
    print(Solution().longestSubstring(s = "ababacb", k = 3))                # 0


# Runtime: 57 ms, faster than 81.45% of Python3 online submissions 
# Memory Usage: 14 MB, less than 60.65% of Python3 online submissions 


#%%
