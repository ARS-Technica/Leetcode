"""
395. Longest Substring with At Least K Repeating Characters
Medium
https://leetcode.com/problems/longest-substring-with-at-least-k-repeating-characters/ 

Given a string s and an integer k, return the length of the longest substring
of s such that the frequency of each character in this substring is greater
than or equal to k.
"""


# Time Complexity: O(N) | Space Complexity: O(1)


from collections import Counter
from collections import defaultdict


class Solution:
    def longestSubstring(self, s, k):
        frequency = Counter(s) 
        max_nums = len(frequency)
        n = len(s)
        result = 0

        for num in range(1, max_nums + 1):
            counter = defaultdict(int)

            left = 0

            for right in range(n):
                counter[s[right]] += 1

                # Maintain the sliding window
                while len(counter) > num:
                    counter[s[left]] -= 1

                    if counter[s[left]] == 0:
                        del counter[s[left]]

                    left += 1

                # With a valid sliding window, check the frequency
                if all(count >= k for key, count in counter.items()):
                    result = max(result, right - left + 1)

        return result


if __name__ == '__main__':
    print(Solution().longestSubstring(s = "aaabb", k = 3))                   # 3
    print(Solution().longestSubstring(s = "ababbc", k = 2))                  # 5


# Runtime: 186 ms, faster than 38.47% of Python3 online submissions 
# Memory Usage: 13.9 MB, less than 90.65% of Python3 online submissions 


#%%
