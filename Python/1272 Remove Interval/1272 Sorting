"""
1272. Remove Interval
Medium
https://leetcode.com/problems/remove-interval

A set of real numbers can be represented as the union of several disjoint
intervals, where each interval is in the form [a, b). A real number x is in the
set if one of its intervals [a, b) contains x (i.e. a <= x < b).

You are given a sorted list of disjoint intervals intervals representing a set
of real numbers as described above, where intervals[i] = [ai, bi] represents the
interval [ai, bi). You are also given another interval toBeRemoved.

Return the set of real numbers with the interval toBeRemoved removed from intervals.
In other words, return the set of real numbers such that every x in the set is
in intervals but not in toBeRemoved. Your answer should be a sorted list of
disjoint intervals as described above.
"""


class Solution:
    def removeInterval(self, intervals, toBeRemoved):
        if not toBeRemoved: return intervals

        remove = set()
        result = []

        for n in range(toBeRemoved[0] + 1, toBeRemoved[1]):
            remove.add(n)

        for start, end in intervals:
            temp = []
            for num in range(start, end + 1):
                if num not in remove:
                    temp.append(num)
            if temp and remove:
                result.append([min(temp), max(temp)])

            if temp and not remove:
                result.append([min(temp), min(toBeRemoved)])
                result.append([max(toBeRemoved), max(temp)])

        print(result)


if __name__ == '__main__':
    print(Solution().removeInterval(intervals = [[0,2],[3,4],[5,7]], toBeRemoved = [1,6]))                           # [[0,1],[6,7]]
    print(Solution().removeInterval(intervals = [[0,5]], toBeRemoved = [2,3]))                                       # [[0,2],[3,5]]
    print(Solution().removeInterval(intervals = [[-5,-4],[-3,-2],[1,2],[3,5],[8,9]], toBeRemoved = [-1,4]))          # [[-5,-4],[-3,-2],[4,5],[8,9]]


# Locked.  Can't test.


#%%


Time Complexity: O(N) | Space Complexity: O(N)


class Solution:
    def removeInterval(self, intervals, toBeRemoved):
        if not toBeRemoved: return intervals

        result = []

        for interval in intervals:
            if toBeRemoved[0] >= interval[1] or toBeRemoved[1] <= interval[0]:
                result.append(interval)
            else:
                if interval[0] < toBeRemoved[0]:
                    result.append([interval[0], toBeRemoved[0]])
                if interval[1] > toBeRemoved[1]:
                    result.append([toBeRemoved[1], interval[1]])

        return result


if __name__ == '__main__':
    print(Solution().removeInterval(intervals = [[0,2],[3,4],[5,7]], toBeRemoved = [1,6]))                           # [[0,1],[6,7]]
    print(Solution().removeInterval(intervals = [[0,5]], toBeRemoved = [2,3]))                                       # [[0,2],[3,5]]
    print(Solution().removeInterval(intervals = [[-5,-4],[-3,-2],[1,2],[3,5],[8,9]], toBeRemoved = [-1,4]))          # [[-5,-4],[-3,-2],[4,5],[8,9]]


# Locked.  Can't test.


#%%
