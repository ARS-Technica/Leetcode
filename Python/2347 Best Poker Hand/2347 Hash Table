"""
2347. Best Poker Hand
Easy
https://leetcode.com/problems/best-poker-hand/description/

You are given an integer array ranks and a character array suits. You have 5
cards where the ith card has a rank of ranks[i] and a suit of suits[i].

The following are the types of poker hands you can make from best to worst:

"Flush": Five cards of the same suit.
"Three of a Kind": Three cards of the same rank.
"Pair": Two cards of the same rank.
"High Card": Any single card.
Return a string representing the best type of poker hand you can make with the given cards.

Note that the return values are case-sensitive.
"""


from collections import defaultdict


class Solution:
    def bestHand(self, ranks, suits):
        ranks_freq = defaultdict(int)
        suits_freq = defaultdict(int)

        for num in ranks:
            ranks_freq[num] += 1

        for char in suits:
            suits_freq[char] += 1

        #print(ranks_freq)
        #print(suits_freq)

        #max_rank = max(ranks_freq, key=ranks_freq.get)
        #max_suit = max(suits_freq, key=suits_freq.get)

        max_rank = max(ranks_freq.items(), key=lambda x: x[1])  # TypeError: '>=' not supported between instances of 'tuple' and 'int'
        max_suit = max(suits_freq.items(), key=lambda x: x[1])  # TypeError: '>=' not supported between instances of 'tuple' and 'int'

        #print(max_rank[1])
        #print(max_suit[1])

        if max_suit[1] >= 5: return "Flush"

        if max_rank[1] >= 3: return "Three of a Kind"
        if max_rank[1] == 2: return "Pair"

        return "High Card"


if __name__ == "__main__":
    print(Solution().bestHand(ranks = [13,2,3,1,9], suits = ["a","a","a","a","a"]))             # "Flush"
    print(Solution().bestHand(ranks = [4,4,2,4,4], suits = ["d","a","a","b","c"]))              # "Three of a Kind"
    print(Solution().bestHand(ranks = [10,10,2,12,9], suits = ["a","b","c","a","d"]))           # "Pair"


# Runtime: 20 ms, faster than 99.18% of Python3 online submissions
# Memory Usage: 13.8 MB, less than 61.11% of Python3 online submissions


#%%


from collections import defaultdict


class Solution:
    def bestHand(self, ranks, suits):
        ranks_freq = defaultdict(int)
        suits_freq = defaultdict(int)

        for num in ranks:
            ranks_freq[num] += 1

        for char in suits:
            suits_freq[char] += 1

        #print(ranks_freq)
        #print(suits_freq)

        max_rank = max(ranks_freq, key=ranks_freq.get)
        max_suit = max(suits_freq, key=suits_freq.get)

        #max_rank = max(ranks_freq.items(), key=lambda x: x[1])  # TypeError: '>=' not supported between instances of 'tuple' and 'int'
        #max_suit = max(suits_freq.items(), key=lambda x: x[1])  # TypeError: '>=' not supported between instances of 'tuple' and 'int'

        #print(max_rank)
        #print(max_suit)

        if suits_freq[max_suit] >= 5: return "Flush"

        if ranks_freq[max_rank] >= 3: return "Three of a Kind"
        if ranks_freq[max_rank] == 2: return "Pair"

        return "High Card"


if __name__ == "__main__":
    print(Solution().bestHand(ranks = [13,2,3,1,9], suits = ["a","a","a","a","a"]))             # "Flush"
    print(Solution().bestHand(ranks = [4,4,2,4,4], suits = ["d","a","a","b","c"]))              # "Three of a Kind"
    print(Solution().bestHand(ranks = [10,10,2,12,9], suits = ["a","b","c","a","d"]))           # "Pair"


# Runtime: 31 ms, faster than 77.57% of Python3 online submissions
# Memory Usage: 13.8 MB, less than 96.91% of Python3 online submissions


#%%


from collections import defaultdict


class Solution:
    def bestHand(self, ranks, suits):
        if len(set(suits)) == 1: return 'Flush'

        ranks_freq = defaultdict(int)

        for num in ranks: ranks_freq[num] += 1
        max_rank = max(ranks_freq.items(), key=lambda x: x[1])

        if max_rank[1] >= 3: return "Three of a Kind"
        if max_rank[1] == 2: return "Pair"

        return "High Card"


if __name__ == "__main__":
    print(Solution().bestHand(ranks = [13,2,3,1,9], suits = ["a","a","a","a","a"]))             # "Flush"
    print(Solution().bestHand(ranks = [4,4,2,4,4], suits = ["d","a","a","b","c"]))              # "Three of a Kind"
    print(Solution().bestHand(ranks = [10,10,2,12,9], suits = ["a","b","c","a","d"]))           # "Pair"


# Runtime: 27 ms, faster than 91.77% of Python3 online submissions
# Memory Usage: 13.8 MB, less than 61.11% of Python3 online submissions


#%%


class Solution:
    def bestHand(self, ranks, suits):
        ranks_freq = {}
        suits_freq = {}

        for num in ranks:
            if num not in ranks_freq:
                ranks_freq[num] = 1
            else:
                ranks_freq[num] += 1

        for char in suits:
            if char not in suits_freq:
                suits_freq[char] = 1
            else:
                suits_freq[char] += 1

        #print(ranks_freq)
        #print(suits_freq)

        max_rank = max(ranks_freq, key=ranks_freq.get)
        max_suit = max(suits_freq, key=suits_freq.get)

        #max_rank = max(ranks_freq.items(), key=lambda x: x[1])  # TypeError: '>=' not supported between instances of 'tuple' and 'int'
        #max_suit = max(suits_freq.items(), key=lambda x: x[1])  # TypeError: '>=' not supported between instances of 'tuple' and 'int'

        #print(max_rank)
        #print(max_suit)

        if suits_freq[max_suit] >= 5: return "Flush"

        if ranks_freq[max_rank] >= 3: return "Three of a Kind"
        if ranks_freq[max_rank] == 2: return "Pair"

        return "High Card"


if __name__ == "__main__":
    print(Solution().bestHand(ranks = [13,2,3,1,9], suits = ["a","a","a","a","a"]))             # "Flush"
    print(Solution().bestHand(ranks = [4,4,2,4,4], suits = ["d","a","a","b","c"]))              # "Three of a Kind"
    print(Solution().bestHand(ranks = [10,10,2,12,9], suits = ["a","b","c","a","d"]))           # "Pair"


# Runtime: 36 ms, faster than 47.53% of Python3 online submissions
# Memory Usage: 13.7 MB, less than 96.91% of Python3 online submissions


#%%


class Solution:
    def bestHand(self, ranks, suits):
        ranks_freq = {}
        suits_freq = {}

        for num in ranks:
            if num not in ranks_freq:
                ranks_freq[num] = 1
            else:
                ranks_freq[num] += 1

        for char in suits:
            if char not in suits_freq:
                suits_freq[char] = 1
            else:
                suits_freq[char] += 1

        #print(ranks_freq)
        #print(suits_freq)

        #max_rank = max(ranks_freq, key=ranks_freq.get)
        #max_suit = max(suits_freq, key=suits_freq.get)

        max_rank = max(ranks_freq.items(), key=lambda x: x[1])  # TypeError: '>=' not supported between instances of 'tuple' and 'int'
        max_suit = max(suits_freq.items(), key=lambda x: x[1])  # TypeError: '>=' not supported between instances of 'tuple' and 'int'

        #print(max_rank[1])
        #print(max_suit[1])

        if max_suit[1] >= 5: return "Flush"

        if max_rank[1] >= 3: return "Three of a Kind"
        if max_rank[1] == 2: return "Pair"

        return "High Card"


if __name__ == "__main__":
    print(Solution().bestHand(ranks = [13,2,3,1,9], suits = ["a","a","a","a","a"]))             # "Flush"
    print(Solution().bestHand(ranks = [4,4,2,4,4], suits = ["d","a","a","b","c"]))              # "Three of a Kind"
    print(Solution().bestHand(ranks = [10,10,2,12,9], suits = ["a","b","c","a","d"]))           # "Pair"


# Runtime: 33 ms, faster than 66.25% of Python3 online submissions
# Memory Usage: 13.9 MB, less than 13.58% of Python3 online submissions


#%%
