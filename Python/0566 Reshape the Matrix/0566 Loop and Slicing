# It's slower with slicing than iterating

class Solution:
    def matrixReshape(self, mat, r, c): 
        flattened = []
        res = []
    
        for i in mat:
            for j in i:
                flattened.append(j)
    
        if len(flattened) != r * c:
            return mat
        else:
            for i in range(0, len(flattened), c):
                res.append(flattened[i : i + c])
            return res


if __name__ == "__main__":
    lc = Solution() 
    print(lc.matrixReshape([[1,2],[3,4]], r = 1, c = 4))       # [[1,2,3,4]]
    print(lc.matrixReshape([[1,2],[3,4]], r = 2, c = 4))       # [[1,2],[3,4]] 
    print(lc.matrixReshape([[1,2],[3,4]], r = 4, c = 1))       # [[1],[2],[3],[4]] 


# Runtime: 132 ms, faster than 46.67% of Python3 online submissions for Reshape the Matrix.
# Memory Usage: 14.6 MB, less than 98.84% of Python3 online submissions for Reshape the Matrix.
