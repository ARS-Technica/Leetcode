# It's slower with slicing than iterating

class Solution:
    def matrixReshape(self, mat, r, c): 
        flat_list = []
        matrix = []
    
        for sublist in mat:
            for item in sublist:
                flat_list.append(item)
    
        if len(flat_list) != r * c:
            return mat
        else:
            for i in range(0,len(flat_list),c):
                matrix.append(flat_list[i:i+c])
            return matrix


if __name__ == "__main__":
    lc = Solution() 
    print(lc.matrixReshape([[1,2],[3,4]], r = 1, c = 4))       # [[1,2,3,4]]
    print(lc.matrixReshape([[1,2],[3,4]], r = 2, c = 4))       # [[1,2],[3,4]] 
    print(lc.matrixReshape([[1,2],[3,4]], r = 4, c = 1))       # [[1],[2],[3],[4]] 


# Runtime: 132 ms, faster than 46.67% of Python3 online submissions for Reshape the Matrix.
# Memory Usage: 14.6 MB, less than 98.84% of Python3 online submissions for Reshape the Matrix.
