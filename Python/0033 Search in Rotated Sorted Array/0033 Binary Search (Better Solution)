
# Better solution. Not mine.
# https://leetcode.com/problems/search-in-rotated-sorted-array/discuss/1698723/Python3-Runtime%3A-28-ms-faster-than-99.69-or-Memory%3A-14-MB-less-than-99.97


class Solution:
    def search(self, nums, target):
        if not nums:
        	return -1
        
        left, right = 0, len(nums) - 1
        
        while left <= right:
        	middle = int((left + right) / 2)
            
        	if nums[middle] == target:
        		return middle
            
        	if nums[left] <= nums[middle]:
        		if target >= nums[left] and target <= nums[middle]:
        			right = middle - 1
        		else:
        			left = middle + 1
                    
        	else:
        		if target >= nums[middle] and target <= nums[right]:
        			left = middle + 1
        		else:
        			right = middle - 1
                    
        return -1        


if __name__ == "__main__":
    lc = Solution() 
    print(lc.search([4,5,6,7,0,1,2], 0))        # 4
    print(lc.search([4,5,6,7,0,1,2], 3))        # -1
    print(lc.search([1], 0))                    # -1


# Runtime: 49 ms, faster than 69.51% of Python3 online submissions for Search in Rotated Sorted Array.
# Memory Usage: 14.3 MB, less than 80.02% of Python3 online submissions for Search in Rotated Sorted Array.
