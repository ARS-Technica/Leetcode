# My attempts to make the script more efficient.

class Solution:
    def kidsWithCandies(self, candies, extraCandies):
        res = []
        for i in candies:
            res.append((i + extraCandies) >= max(candies)) 
        
        return res


if __name__ == "__main__":
    lc = Solution() 
    print(lc.kidsWithCandies([2,3,5,1,3], 3))       # [true,true,true,false,true] 
    print(lc.kidsWithCandies([4,2,1,1,2], 1))       # [true,false,false,false,false] 
    print(lc.kidsWithCandies([12,1,12], 10))        # [true,false,true]


# Runtime: 85 ms, faster than 5.34% of Python3 online submissions for Kids With the Greatest Number of Candies.
# Memory Usage: 13.8 MB, less than 81.77% of Python3 online submissions for Kids With the Greatest Number of Candies.
 
#%%


class Solution:
    def kidsWithCandies(self, candies, extraCandies):
        res = [((i + extraCandies) >= max(candies)) for i in candies] 
        return res


if __name__ == "__main__":
    lc = Solution() 
    print(lc.kidsWithCandies([2,3,5,1,3], 3))       # [true,true,true,false,true] 
    print(lc.kidsWithCandies([4,2,1,1,2], 1))       # [true,false,false,false,false] 
    print(lc.kidsWithCandies([12,1,12], 10))        # [true,false,true]


# Runtime: 70 ms, faster than 21.50% of Python3 online submissions for Kids With the Greatest Number of Candies.
# Memory Usage: 13.8 MB, less than 98.70% of Python3 online submissions for Kids With the Greatest Number of Candies.
 
#%%


class Solution:
    def kidsWithCandies(self, candies, extraCandies):
        maxCandies = max(candies)   # It's O(n^2) if you're calling max function in each iteration
        res = [((i + extraCandies) >= maxCandies) for i in candies] 
        return res


if __name__ == "__main__":
    lc = Solution() 
    print(lc.kidsWithCandies([2,3,5,1,3], 3))       # [true,true,true,false,true] 
    print(lc.kidsWithCandies([4,2,1,1,2], 1))       # [true,false,false,false,false] 
    print(lc.kidsWithCandies([12,1,12], 10))        # [true,false,true]


# Runtime: 60 ms, faster than 41.18% of Python3 online submissions for Kids With the Greatest Number of Candies.
# Memory Usage: 13.9 MB, less than 81.77% of Python3 online submissions for Kids With the Greatest Number of Candies.
 
#%%


class Solution:
    def kidsWithCandies(self, candies, extraCandies):
        maxCandies = max(candies)
        return [((i + extraCandies) >= maxCandies) for i in candies]


if __name__ == "__main__":
    lc = Solution() 
    print(lc.kidsWithCandies([2,3,5,1,3], 3))       # [true,true,true,false,true] 
    print(lc.kidsWithCandies([4,2,1,1,2], 1))       # [true,false,false,false,false] 
    print(lc.kidsWithCandies([12,1,12], 10))        # [true,false,true]


# Runtime: 47 ms, faster than 67.69% of Python3 online submissions for Kids With the Greatest Number of Candies.
# Memory Usage: 13.8 MB, less than 81.77% of Python3 online submissions for Kids With the Greatest Number of Candies. 
 
#%%
