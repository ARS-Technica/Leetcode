"""
762. Prime Number of Set Bits in Binary Representation
Easy
https://leetcode.com/problems/prime-number-of-set-bits-in-binary-representation/
Created on Wed Mar  9 18:05:35 2022

Given two integers left and right, return the count of numbers in the inclusive 
range [left, right] having a prime number of set bits in their binary representation.

Recall that the number of set bits an integer has is the number of 1's present 
when written in binary.
"""


class Solution:
    def countPrimeSetBits(self, left, right):
        count = 0
        res = [0]

        for i in range(left, right+1): 
            # Solution to Problem 191: Number of 1 Bits
            ham = 0
            while i:
                i &= i - 1
                ham += 1
                
            res.append(ham)
            
        for n in res: 
                if n > 1: 
                    for i in range(2, int(n**0.5)+1): 
                        if (n % i) == 0: 
                            break
                    else:
                        count += 1 
                        
        return count


if __name__ == "__main__":
    lc = Solution() 
    print(lc.countPrimeSetBits(6, 10))    # 4
    print(lc.countPrimeSetBits(10, 15))   # 5 

# Runtime: 777 ms, faster than 39.08% of Python3 online submissions for Prime Number of Set Bits in Binary Representation.
# Memory Usage: 13.9 MB, less than 51.18% of Python3 online submissions for Prime Number of Set Bits in Binary Representation.


#%%


class Solution:
    def countPrimeSetBits(self, left, right):
        count = 0
        res = [0]

        for i in range(left, right+1): 
            # Solution to Problem 191: Number of 1 Bits
            ham = 0
            while i:
                i &= i - 1
                ham += 1
                
            res.append(ham)
            
        for n in res:
            if n in [2,3,5,7,11,13,17,19,23,29,31,]:
                count += 1
            else: 
                if n > 1: 
                    for i in range(2, int(n**0.5)+1): 
                        if (n % i) == 0: 
                            break
                    else:
                        count += 1
                        
        return count


if __name__ == "__main__":
    lc = Solution() 
    print(lc.countPrimeSetBits(6, 10))    # 4
    print(lc.countPrimeSetBits(10, 15))   # 5 

# Runtime: 692 ms, faster than 43.01% of Python3 online submissions for Prime Number of Set Bits in Binary Representation.
# Memory Usage: 13.9 MB, less than 83.83% of Python3 online submissions for Prime Number of Set Bits in Binary Representation.

