"""
2284. Sender With Largest Word Count
Medium
https://leetcode.com/problems/sender-with-largest-word-count/

You have a chat log of n messages. You are given two string arrays messages and
senders where messages[i] is a message sent by senders[i].

A message is list of words that are separated by a single space with no leading
or trailing spaces. The word count of a sender is the total number of words sent
by the sender. Note that a sender may send more than one message.

Return the sender with the largest word count. If there is more than one sender
with the largest word count, return the one with the lexicographically largest name.
"""


class Solution:
    def largestWordCount(self, messages, senders):
        frequency = dict.fromkeys(senders, 0)

        for idx, message in enumerate(messages):
            frequency[senders[idx]] += len(message.split())

        # return max(frequency.values())  # 5    
        # return max(frequency, key=frequency.get) # Bob
        max_freq = [key for key, value in frequency.items() if value == max(frequency.values())]  # ['Bob', 'Charlie']
        return max(max_freq)


if __name__ == '__main__':
    print(Solution().largestWordCount(messages = ["Hello userTwooo","Hi userThree","Wonderful day Alice","Nice day userThree"], senders = ["Alice","userTwo","userThree","Alice"]))    # "Alice"
    print(Solution().largestWordCount(messages = ["How is leetcode for everyone","Leetcode is useful for practice"], senders = ["Bob","Charlie"]))    # "Charlie"

# Time Limit Exceeded


#%%


from collections import Counter


class Solution:
    def largestWordCount(self, messages, senders):
        frequency = Counter()
        hashmap = zip(messages, senders)

        for message, sender in hashmap:
            frequency[sender] += len(message.split())

        max_freq = [key for key, value in frequency.items() if value == max(frequency.values())]  # ['Bob', 'Charlie']
        return max(max_freq)


if __name__ == '__main__':
    print(Solution().largestWordCount(messages = ["Hello userTwooo","Hi userThree","Wonderful day Alice","Nice day userThree"], senders = ["Alice","userTwo","userThree","Alice"]))    # "Alice"
    print(Solution().largestWordCount(messages = ["How is leetcode for everyone","Leetcode is useful for practice"], senders = ["Bob","Charlie"]))    # "Charlie"


# Time Limit Exceeded


#%%


from collections import Counter


class Solution:
    def largestWordCount(self, messages, senders):
        frequency = dict.fromkeys(senders, 0)
        hashmap = zip(messages, senders)

        for message, sender in hashmap:
            frequency[sender] += len(message.split())

        return sorted(frequency.items(), key=lambda x: (x[1], x[0]))[-1][0]


if __name__ == '__main__':
    print(Solution().largestWordCount(messages = ["Hello userTwooo","Hi userThree","Wonderful day Alice","Nice day userThree"], senders = ["Alice","userTwo","userThree","Alice"]))    # "Alice"
    print(Solution().largestWordCount(messages = ["How is leetcode for everyone","Leetcode is useful for practice"], senders = ["Bob","Charlie"]))    # "Charlie"


# Runtime: 1147 ms, faster than 20.30% of Python3 online submissions for Sender With Largest Word Count.
# Memory Usage: 22.5 MB, less than 5.80% of Python3 online submissions for Sender With Largest Word Count.


#%% 


from collections import Counter


class Solution:
    def largestWordCount(self, messages, senders):
        frequency = Counter()
        hashmap = zip(messages, senders)

        for message, sender in hashmap:
            frequency[sender] += message.count(' ') + 1

        return sorted(frequency.items(), key=lambda x: (x[1], x[0]))[-1][0]


if __name__ == '__main__':
    print(Solution().largestWordCount(messages = ["Hello userTwooo","Hi userThree","Wonderful day Alice","Nice day userThree"], senders = ["Alice","userTwo","userThree","Alice"]))    # "Alice"
    print(Solution().largestWordCount(messages = ["How is leetcode for everyone","Leetcode is useful for practice"], senders = ["Bob","Charlie"]))    # "Charlie"


# Runtime: 566 ms, faster than 76.03% of Python3 online submissions for Sender With Largest Word Count.
# Memory Usage: 21.6 MB, less than 21.07% of Python3 online submissions for Sender With Largest Word Count.


#%%


from collections import Counter


class Solution:
    def largestWordCount(self, messages, senders):
        frequency = {}

        for message, sender in zip(messages, senders):
            words = message.count(' ') + 1

            if sender not in frequency:
                frequency[sender] = words

            else:
                frequency[sender] += words

        max_freq = max(frequency.values())

        result = ''

        for sender in frequency:
            if frequency[sender] == max_freq and result < sender:
                result = sender

        return result


if __name__ == '__main__':
    print(Solution().largestWordCount(messages = ["Hello userTwooo","Hi userThree","Wonderful day Alice","Nice day userThree"], senders = ["Alice","userTwo","userThree","Alice"]))    # "Alice"
    print(Solution().largestWordCount(messages = ["How is leetcode for everyone","Leetcode is useful for practice"], senders = ["Bob","Charlie"]))    # "Charlie"


# Runtime: 1064 ms, faster than 30.99% of Python3 online submissions for Sender With Largest Word Count.
# Memory Usage: 21.2 MB, less than 65.04% of Python3 online submissions for Sender With Largest Word Count.


#%%    


from collections import Counter


class Solution:
    def largestWordCount(self, messages, senders):
        frequency = {}

        for message, sender in zip(messages, senders):
            words = message.count(' ') + 1

            if sender in frequency:
                frequency[sender] += words
            else:
                frequency[sender] = words

        max_freq = max(frequency.values())

        result = ''

        for sender in frequency:
            if frequency[sender] == max_freq and result < sender:
                result = sender

        return result


if __name__ == '__main__':
    print(Solution().largestWordCount(messages = ["Hello userTwooo","Hi userThree","Wonderful day Alice","Nice day userThree"], senders = ["Alice","userTwo","userThree","Alice"]))    # "Alice"
    print(Solution().largestWordCount(messages = ["How is leetcode for everyone","Leetcode is useful for practice"], senders = ["Bob","Charlie"]))    # "Charlie"


# Runtime: 527 ms, faster than 78.63% of Python3 online submissions for Sender With Largest Word Count.
# Memory Usage: 21.4 MB, less than 37.86% of Python3 online submissions for Sender With Largest Word Count.


#%%


# Better Solution. Not mine.
# https://leetcode.com/problems/sender-with-largest-word-count/discuss/2721547/PYTHON-Faster-than-99.82-oror-Easy-python-solution


class Solution:
    def largestWordCount(self, messages: List[str], senders: List[str]) -> str:
        hashmap = dict()
        
        for message, name in zip(messages, senders):
            if name in hashmap:
                hashmap[name] += len(message.split(" "))
            else:
                hashmap[name] = len(message.split(" "))
        
        maximum = max(hashmap.values())
        
        return max([key for key, value in hashmap.items() if value == maximum])


if __name__ == '__main__':
    print(Solution().largestWordCount(messages = ["Hello userTwooo","Hi userThree","Wonderful day Alice","Nice day userThree"], senders = ["Alice","userTwo","userThree","Alice"]))    # "Alice"
    print(Solution().largestWordCount(messages = ["How is leetcode for everyone","Leetcode is useful for practice"], senders = ["Bob","Charlie"]))    # "Charlie"


# Runtime: 496 ms, faster than 80.92% of Python3 online submissions for Sender With Largest Word Count.
# Memory Usage: 21.4 MB, less than 37.86% of Python3 online submissions for Sender With Largest Word Count.


#%%  
