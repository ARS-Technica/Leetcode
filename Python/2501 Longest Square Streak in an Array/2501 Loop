"""
2501. Longest Square Streak in an Array
Medium
https://leetcode.com/problems/longest-square-streak-in-an-array/description/ 

You are given an integer array nums. A subsequence of nums is called a square streak if:

The length of the subsequence is at least 2, and
after sorting the subsequence, each element (except the first element) is the
square of the previous number.

Return the length of the longest square streak in nums, or return -1 if there
is no square streak.

A subsequence is an array that can be derived from another array by deleting
some or no elements without changing the order of the remaining elements.
"""


class Solution:
    def longestSquareStreak(self, nums):
        nums.sort() 
        result = 0

        for idx in range(len(nums)):
            square = nums[idx]**2
            streak = 0
            while square in nums:
                streak += 1
                square = square**2
            else:
                result = max(result, streak)

        return -1 if result == 0 else result + 1


if __name__ == '__main__':
    print(Solution().longestSquareStreak(nums = [4,3,6,16,8,2]))        # 3
    print(Solution().longestSquareStreak(nums = [2,3,5,6,7]))           # -1


# Time Limit Exceeded


#%%  


class Solution:
    def longestSquareStreak(self, nums):
        nums = list(set(nums))
        nums.sort() 
        result = 0

        for idx in range(len(nums)-1):
            square = nums[idx]**2
            streak = 0
            while square in nums:
                streak += 1
                square *= square
            else:
                result = max(result, streak)

        return -1 if result == 0 else result + 1


if __name__ == '__main__':
    print(Solution().longestSquareStreak(nums = [4,3,6,16,8,2]))        # 3
    print(Solution().longestSquareStreak(nums = [2,3,5,6,7]))           # -1


# Time Limit Exceeded


#%%


class Solution:
    def longestSquareStreak(self, nums):
        candidates = set(nums)
        result = -1

        for num in nums:
            streak = 0
            while num in candidates:
                streak += 1
                num *= num

            # result = max(result, streak)
            if streak > 1: result = max(result, streak)

        return result


if __name__ == '__main__':
    print(Solution().longestSquareStreak(nums = [4,3,6,16,8,2]))        # 3
    print(Solution().longestSquareStreak(nums = [2,3,5,6,7]))           # -1


# Runtime: 2582 ms, faster than 25.93% of Python3 online submissions
# Memory Usage: 28.9 MB, less than 84.18% of Python3 online submissions


#%%


# Better solution.  Not mine.
# https://leetcode.com/problems/longest-square-streak-in-an-array/solutions/2905642/python-3-11-lines-mathematics-w-brief-comments-t-m-97-68/


class Solution:
    def longestSquareStreak(self, nums):
        candidates = set(nums)
        nums = sorted(candidates)
        result = 0

        # candidates = {n for n in candidates if n%4 < 2}

        for num in nums:
            square = num**2
            streak = 1
            while square in candidates:
                streak += 1
                square *= square

            if streak > 1: result = max(result, streak)

        return -1 if result == 0 else result


if __name__ == '__main__':
    print(Solution().longestSquareStreak(nums = [4,3,6,16,8,2]))        # 3
    print(Solution().longestSquareStreak(nums = [2,3,5,6,7]))           # -1


# Runtime: 936 ms, faster than 94.26% of Python3 online submissions
# Memory Usage: 28.9 MB, less than 84.18% of Python3 online submissions


#%% 


class Solution:
    def longestSquareStreak(self, nums):
        candidates = set(nums)
        nums = sorted(candidates)
        result = 0

        candidates = {n for n in candidates if n%4 < 2}

        for num in nums:
            square = num**2
            streak = 1
            while square in candidates:
                streak += 1
                square *= square

            if streak > 1: result = max(result, streak)

        return -1 if result == 0 else result


if __name__ == '__main__':
    print(Solution().longestSquareStreak(nums = [4,3,6,16,8,2]))        # 3
    print(Solution().longestSquareStreak(nums = [2,3,5,6,7]))           # -1


# Runtime: 912 ms, faster than 96.39% of Python3 online submissions
# Memory Usage: 29.3 MB, less than 67.6% of Python3 online submissions


#%% 
