# -*- coding: utf-8 -*-
"""
2414. Length of the Longest Alphabetical Continuous Substring
Medium
https://leetcode.com/problems/length-of-the-longest-alphabetical-continuous-substring/

An alphabetical continuous string is a string consisting of consecutive letters
in the alphabet. In other words, it is any substring of the string "abcdefghijklmnopqrstuvwxyz".

For example, "abc" is an alphabetical continuous string, while "acb" and "za" are not.
Given a string s consisting of lowercase letters only, return the length of the
longest alphabetical continuous substring.
"""


# Sliding Window. 


class Solution:
    def longestContinuousSubstring(self, s):
        left = 0
        length = len(s)
        result = 0

        if length == 1: return 1

        for right in range(1, length):
            if ord(s[right]) - ord(s[right-1]) != 1:
                left = right

            result = max(result, (right - left) + 1)

        return result


if __name__ == '__main__':
    print(Solution().longestContinuousSubstring(s = "abacaba"))             # 2
    print(Solution().longestContinuousSubstring(s = "abcde"))               # 5 


# Runtime: 591 ms, faster than 78.19% of Python3 online submissions for Consecutive Characters.
# Memory Usage: 15 MB, less than 25.19% of Python3 online submissions for Consecutive Characters.


#%%
 
