"""
692. Top K Frequent Words
Medium
https://leetcode.com/problems/top-k-frequent-words/ 

Given an array of strings words and an integer k, return the k most frequent strings.

Return the answer sorted by the frequency from highest to lowest. Sort the
words with the same frequency by their lexicographical order.
"""


class Solution:
    def topKFrequent(self, words, k):
        frequency = dict()
        result = []

        for word in words:
            if word in frequency:
                frequency[word] += 1
            else:
                frequency[word] = 1

        ordered = sorted(frequency.items(), key=lambda i: (-i[1], i[0]))

        for idx, tup in enumerate(ordered):
            if idx < k:
                result.append(tup[0])

        return result


if __name__ == '__main__':
    print(Solution().topKFrequent(words = ["i","love","leetcode","i","love","coding"], k = 2))   # ["i","love"]
    print(Solution().topKFrequent(words = ["the","day","is","sunny","the","the","the","sunny","is","is"], k = 4))   # ["the","is","sunny","day"]
    print(Solution().topKFrequent(words = ["i","love","leetcode","i","love","coding"], k = 3))   # ["i","love","coding"]


# Runtime: 125 ms, faster than 41.25% of Python3 online submissions for Top K Frequent Words.
# Memory Usage: 13.9 MB, less than 62.61% of Python3 online submissions for Top K Frequent Words.


#%%


class Solution:
    def topKFrequent(self, words, k):
        count = dict()
        frequency = dict()
        result = []

        for word in words:
            if word in frequency:
                frequency[word] += 1
            else:
                frequency[word] = 1

        for key, value in frequency.items():
            if value in count:
                count[value].append(key)
            else:
                count[value] = [key]          

       # print(count)    # {2: ['i', 'love'], 1: ['leetcode', 'coding']}

        for x in range(len(words), 0, -1):
            if x in count:
                
                count[x].sort()
                for n in count[x]:
                    result.append(n)


        return result[:k]


if __name__ == '__main__':
    print(Solution().topKFrequent(words = ["i","love","leetcode","i","love","coding"], k = 2))   # ["i","love"]
    print(Solution().topKFrequent(words = ["the","day","is","sunny","the","the","the","sunny","is","is"], k = 4))   # ["the","is","sunny","day"]
    print(Solution().topKFrequent(words = ["i","love","leetcode","i","love","coding"], k = 3))   # ["i","love","coding"]


# Runtime: 121 ms, faster than 48.31% of Python3 online submissions for Top K Frequent Words.
# Memory Usage: 13.9 MB, less than 93.95% of Python3 online submissions for Top K Frequent Words.


#%%


class Solution:
    def topKFrequent(self, words, k):
        count = dict()
        frequency = dict()
        result = []

        for word in words:
            if word in frequency:
                frequency[word] += 1
            else:
                frequency[word] = 1

        for key, value in frequency.items():
            if value in count:
                count[value].append(key)
            else:
                count[value] = [key]          

        counter = 0

        for x in range(len(words), 0, -1):
            if x in count:

                count[x].sort()
                for n in count[x]:
                    if counter < k:
                        result.append(n)
                        counter += 1
                    else:
                        return result  

        return result


if __name__ == '__main__':
    print(Solution().topKFrequent(words = ["i","love","leetcode","i","love","coding"], k = 2))   # ["i","love"]
    print(Solution().topKFrequent(words = ["the","day","is","sunny","the","the","the","sunny","is","is"], k = 4))   # ["the","is","sunny","day"]
    print(Solution().topKFrequent(words = ["i","love","leetcode","i","love","coding"], k = 3))   # ["i","love","coding"]


# Runtime: 94 ms, faster than 74.02% of Python3 online submissions for Top K Frequent Words.
# Memory Usage: 13.9 MB, less than 62.61% of Python3 online submissions for Top K Frequent Words.


#%%


class Solution:
    def topKFrequent(self, words, k):
        frequency = dict() 

        for word in words:
            if word in frequency:
                frequency[word] += 1
            else:
                frequency[word] = 1

        # result = sorted(frequency.items(), key=lambda i: (-i[1], i[0]))       # [('i', 2), ('love', 2)]
        result = sorted(frequency, key=lambda i: (-frequency[i], i))

        return result[:k]


if __name__ == '__main__':
    print(Solution().topKFrequent(words = ["i","love","leetcode","i","love","coding"], k = 2))   # ["i","love"]
    print(Solution().topKFrequent(words = ["the","day","is","sunny","the","the","the","sunny","is","is"], k = 4))   # ["the","is","sunny","day"]
    print(Solution().topKFrequent(words = ["i","love","leetcode","i","love","coding"], k = 3))   # ["i","love","coding"]


# Runtime: 70 ms, faster than 82.23% of Python3 online submissions for Top K Frequent Words.
# Memory Usage: 14 MB, less than 62.61% of Python3 online submissions for Top K Frequent Words.


#%%
