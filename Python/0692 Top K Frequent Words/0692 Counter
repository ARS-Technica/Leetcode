"""
692. Top K Frequent Words
Medium
https://leetcode.com/problems/top-k-frequent-words/ 

Given an array of strings words and an integer k, return the k most frequent strings.

Return the answer sorted by the frequency from highest to lowest. Sort the
words with the same frequency by their lexicographical order.
"""


# Failed
from collections import Counter


class Solution:
    def topKFrequent(self, words, k):
        frequency = Counter(words).most_common(k)     # [('i', 2), ('love', 2)]
        return [idx[0] for idx in frequency]


if __name__ == '__main__':
    print(Solution().topKFrequent(words = ["i","love","leetcode","i","love","coding"], k = 2))   # ["i","love"]
    print(Solution().topKFrequent(words = ["the","day","is","sunny","the","the","the","sunny","is","is"], k = 4))   # ["the","is","sunny","day"]
    print(Solution().topKFrequent(words = ["i","love","leetcode","i","love","coding"], k = 3))   # ["i","love","coding"]


# Doesn't work for words = ["i","love","leetcode","i","love","coding"], k = 3
# Output: ["i","love","leetcode"]
# Expected: ["i","love","coding"]


#%%


# Failed
from collections import Counter


class Solution:
    def topKFrequent(self, words, k):
        frequency = Counter(words)      
        # Counter({'i': 2, 'love': 2, 'leetcode': 1, 'coding': 1})
        
        # return sorted(frequency, key=lambda i: -frequency[i])   
        # ['i', 'love', 'leetcode', 'coding']
        
        # return sorted(frequency.items(), key=lambda i: (i[1], i[0]), reverse=True) 
        # [('love', 2), ('i', 2), ('leetcode', 1), ('coding', 1)]
        
        return sorted(frequency.items(), key=lambda i: (-i[1], i[0]))
        # [('i', 2), ('love', 2), ('coding', 1), ('leetcode', 1)]


if __name__ == '__main__':
    print(Solution().topKFrequent(words = ["i","love","leetcode","i","love","coding"], k = 2))   # ["i","love"]
    print(Solution().topKFrequent(words = ["the","day","is","sunny","the","the","the","sunny","is","is"], k = 4))   # ["the","is","sunny","day"]
    print(Solution().topKFrequent(words = ["i","love","leetcode","i","love","coding"], k = 3))   # ["i","love","coding"]


# Doesn't work for words = ["i","love","leetcode","i","love","coding"], k = 3
# Output: ["i","love","leetcode"]
# Expected: ["i","love","coding"]


#%%


from collections import Counter


class Solution:
    def topKFrequent(self, words: List[str], k: int) -> List[str]:
        #Starting from Python 3.7, dictionary order is guaranteed 
        # to be insertion order, thus, we can use 'sorted' first
        return [w for w,_ in Counter(sorted(words)).most_common(k)]


# Runtime: 142 ms, faster than 13.33% of Python3 online submissions for Top K Frequent Words.
# Memory Usage: 14 MB, less than 25.24% of Python3 online submissions for Top K Frequent Words.


#%%


from collections import Counter


class Solution:
    def topKFrequent(self, words, k):
        frequency = Counter(words)       
        ordered = sorted(frequency.items(), key=lambda i: (-i[1], i[0]))
        return [idx[0] for idx in ordered][:k]


if __name__ == '__main__':
    print(Solution().topKFrequent(words = ["i","love","leetcode","i","love","coding"], k = 2))   # ["i","love"]
    print(Solution().topKFrequent(words = ["the","day","is","sunny","the","the","the","sunny","is","is"], k = 4))   # ["the","is","sunny","day"]
    print(Solution().topKFrequent(words = ["i","love","leetcode","i","love","coding"], k = 3))   # ["i","love","coding"]


# Runtime: 138 ms, faster than 18.08% of Python3 online submissions for Top K Frequent Words.
# Memory Usage: 14.1 MB, less than 25.18% of Python3 online submissions for Top K Frequent Words.


#%%


# Not mine.
# https://leetcode.com/problems/top-k-frequent-words/discuss/2723753/Python-one-line-(beats-85)


class Solution:
    def topKFrequent(self, words, k):
        return next(zip(*Counter(sorted(words)).most_common(k)))


if __name__ == '__main__':
    print(Solution().topKFrequent(words = ["i","love","leetcode","i","love","coding"], k = 2))   # ["i","love"]
    print(Solution().topKFrequent(words = ["the","day","is","sunny","the","the","the","sunny","is","is"], k = 4))   # ["the","is","sunny","day"]
    print(Solution().topKFrequent(words = ["i","love","leetcode","i","love","coding"], k = 3))   # ["i","love","coding"]


# Runtime: 133 ms, faster than 26.14% of Python3 online submissions for Top K Frequent Words.
# Memory Usage: 14 MB, less than 62.61% of Python3 online submissions for Top K Frequent Words.


#%%
