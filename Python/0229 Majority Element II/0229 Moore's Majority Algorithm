
# Boyer-Moore Vote
# Better solution. Not mine.
# https://leetcode.com/problems/majority-element-ii/discuss/1495990/Python3-Two-kind-of-solutions


class Solution:
    def majorityElement(self, nums):
        count1 = count2 = 0
        candidate1, candidate2 = 0, 1 
        result = []


        for num in nums:
            if num == candidate1:
                count1 += 1
            elif num == candidate2:
                count2 += 1
            elif count1 == 0:
                candidate1, count1 = num, 1
            elif count2 == 0:
                candidate2, count2 = num, 2
            else:
                count1 -= 1
                count2 -= 1


        for candidate in [candidate1, candidate2]:
            count = 0

            for num in nums:
                if num == candidate:
                    count += 1

            if count > len(nums) // 3:
                result.append(candidate)

        return result


if __name__ == "__main__":
    lc = Solution() 
    print(lc.majorityElement([3,2,3]))              # 3
    print(lc.majorityElement([1]))                  # 1 
    print(lc.majorityElement([1,2]))                # [1,2]  


# Runtime: 210 ms, faster than 26.27% of Python3 online submissions for Majority Element II.
# Memory Usage: 15.2 MB, less than 71.53% of Python3 online submissions for Majority Element II.

