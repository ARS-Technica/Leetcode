"""
1493. Longest Subarray of 1's After Deleting One Element
Medium
https://leetcode.com/problems/longest-subarray-of-1s-after-deleting-one-element/

Given a binary array nums, you should delete one element from it.

Return the size of the longest non-empty subarray containing only 1's in the
resulting array. Return 0 if there is no such subarray.
"""


from itertools import groupby


class Solution:
    def longestSubarray(self, nums):
        if 0 not in nums: return len(nums) - 1
        if 1 not in nums: return 0

        max_ones = 0
        nums = groupby(nums)
        ones = []
        result = 0
        zero = False

        for key, value in nums:
            # print(key, len(list(value)))
            n = len(list(value))
            # print('n', n)

            if key == 0:
                if n == 1 and ones:
                    zero = True
                if n > 1:
                    ones.clear()
                    zero = False

            else:
                if zero == False:
                    ones.append(n)
                    max_ones = max(max_ones, n)
                else:
                    result = max(result, n + ones[-1])
                    zero = False

        return max_ones if result == 0 else result


if __name__ == '__main__':
    print(Solution().longestSubarray(nums = [1,1,0,1]))                         # 3
    print(Solution().longestSubarray(nums = [0,1,1,1,0,1,1,0,1]))               # 5
    print(Solution().longestSubarray(nums = [1,1,1]))                           # 2
    print(Solution().longestSubarray(nums = [1,0,0,0,0]))                       # 1
    print(Solution().longestSubarray(nums = [1,0,1,1,1,1,1,1,0,1,1,1,1,1]))     # 11

# Failed.  Doesn't work for nums = [1,0,1,1,1,1,1,1,0,1,1,1,1,1]


#%%
