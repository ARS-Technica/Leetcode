"""
1493. Longest Subarray of 1's After Deleting One Element
Medium
https://leetcode.com/problems/longest-subarray-of-1s-after-deleting-one-element/

Given a binary array nums, you should delete one element from it.

Return the size of the longest non-empty subarray containing only 1's in the
resulting array. Return 0 if there is no such subarray.
"""


# Similar to exercise 487
# Time Complexity: O(N) | Space Complexity: O(1)


class Solution:
    def longestSubarray(self, nums):
        left = -1
        result = 0
        right = 0

        for num in nums:
            if num == 1:
                right += 1

            else:
                result = max(result, left + right + 1)
                left, right = right, 0

        return max(result, left + right + 1) - 1


if __name__ == '__main__':
    print(Solution().longestSubarray(nums = [1,1,0,1]))                         # 3
    print(Solution().longestSubarray(nums = [0,1,1,1,0,1,1,0,1]))               # 5
    print(Solution().longestSubarray(nums = [1,1,1]))                           # 2
    print(Solution().longestSubarray(nums = [1,0,0,0,0]))                       # 1
    print(Solution().longestSubarray(nums = [1,0,1,1,1,1,1,1,0,1,1,1,1,1]))     # 11


# Runtime: 338 ms, faster than 99.3% of Python3 online submissions
# Memory Usage: 16.3 MB, less than 91.13% of Python3 online submissions


#%%


# Time Complexity: O(N) | Space Complexity: O(1)


class Solution:
    def longestSubarray(self, nums):
        left = -1
        result = 0
        right = 0

        for num in nums:
            if num:
                right += 1

            else:
                result = max(result, left + right + 1)
                left, right = right, 0

        return max(result, left + right + 1) - 1


if __name__ == '__main__':
    print(Solution().longestSubarray(nums = [1,1,0,1]))                         # 3
    print(Solution().longestSubarray(nums = [0,1,1,1,0,1,1,0,1]))               # 5
    print(Solution().longestSubarray(nums = [1,1,1]))                           # 2
    print(Solution().longestSubarray(nums = [1,0,0,0,0]))                       # 1
    print(Solution().longestSubarray(nums = [1,0,1,1,1,1,1,1,0,1,1,1,1,1]))     # 11


# Runtime: 364 ms, faster than 93.44% of Python3 online submissions
# Memory Usage: 16.1 MB, less than 98.6% of Python3 online submissions


#%%


# Time Complexity: O(N) | Space Complexity: O(1)


class Solution:
    def longestSubarray(self, nums):
        left = 0
        k = 1
        right = 0

        while right < len(nums):
            if nums[right] == 0:
                k -= 1

            if k < 0:
                if nums[left] == 0:
                    k += 1
                left += 1
            right += 1

        return right - left - 1


if __name__ == '__main__':
    print(Solution().longestSubarray(nums = [1,1,0,1]))                         # 3
    print(Solution().longestSubarray(nums = [0,1,1,1,0,1,1,0,1]))               # 5
    print(Solution().longestSubarray(nums = [1,1,1]))                           # 2
    print(Solution().longestSubarray(nums = [1,0,0,0,0]))                       # 1
    print(Solution().longestSubarray(nums = [1,0,1,1,1,1,1,1,0,1,1,1,1,1]))     # 11


# Runtime: 376 ms, faster than 88.82% of Python3 online submissions
# Memory Usage: 16.2 MB, less than 98.6% of Python3 online submissions


#%%
