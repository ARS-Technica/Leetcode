"""
2525. Categorize Box According to Criteria
Easy
https://leetcode.com/problems/categorize-box-according-to-criteria/description/

Given four integers length, width, height, and mass, representing the dimensions
and mass of a box, respectively, return a string representing the category of the box.

The box is "Bulky" if:
    Any of the dimensions of the box is greater or equal to 10^4.
    Or, the volume of the box is greater or equal to 10^9.
If the mass of the box is greater or equal to 100, it is "Heavy".
If the box is both "Bulky" and "Heavy", then its category is "Both".
If the box is neither "Bulky" nor "Heavy", then its category is "Neither".
If the box is "Bulky" but not "Heavy", then its category is "Bulky".
If the box is "Heavy" but not "Bulky", then its category is "Heavy".
Note that the volume of the box is the product of its length, width and height.
"""


# There are more sophisticated ways of doing this, but the simplist seem to be most efficent.


class Solution:
    def categorizeBox(self, length, width, height, mass):
        bulky = False
        heavy = False
        volume = height * length * width

        if height >= 10000 or length >= 10000 or width >= 10000: bulky = True

        if mass >= 100: heavy = True

        if volume >= 1000000000: bulky = True

        if bulky == True and heavy == True:
            return "Both"
        if bulky == True and heavy == False:
            return "Bulky"
        if bulky == False and heavy == True:
            return "Heavy"
        else:
            return "Neither"


if __name__ == "__main__":
    print(Solution().categorizeBox(length = 1000, width = 35, height = 700, mass = 300))    # "Heavy"
    print(Solution().categorizeBox(length = 200, width = 50, height = 800, mass = 50))      # "Neither"


# Runtime: 24 ms, faster than 95.27% of Python3 online submissions for Continuous Subarray Sum.
# Memory Usage: 13.9 MB, less than 67.52% of Python3 online submissions for Continuous Subarray Sum. 


#%%


# Grouping booleans for easier reading leads to less efficent run time.


class Solution:
    def categorizeBox(self, length, width, height, mass):
        volume = height * length * width

        if (volume >= 10**9 or height >= 10**4 or width >= 10**4 or length >= 10**4) and mass >=100:
            return "Both"
        elif (volume < 10**9 or height < 10**4 or width < 10**4 or length < 10**4) and mass >=100:
            return "Heavy"
        elif (volume >= 10**9 or height >= 10**4 or width >= 10**4 or length >= 10**4) and mass <100:
            return "Bulky"
        else:
            return "Neither"


if __name__ == "__main__":
    print(Solution().categorizeBox(length = 1000, width = 35, height = 700, mass = 300))    # "Heavy"
    print(Solution().categorizeBox(length = 200, width = 50, height = 800, mass = 50))      # "Neither"


# Runtime: 30 ms, faster than 74.85% of Python3 online submissions for Continuous Subarray Sum.
# Memory Usage: 14 MB, less than 15.69% of Python3 online submissions for Continuous Subarray Sum. 


#%%


# Not mine.
# https://leetcode.com/problems/categorize-box-according-to-criteria/solutions/3014976/c-java-python3-if-else/

# Placing the boolean evalutions in the variables looks slick, but again, results in slower performance.


class Solution:
    def categorizeBox(self, length, width, height, mass):
        bulky = max(length, width, height) >= 10000 or length*width*height >= 1000000000
        heavy = mass >= 100 

        if bulky and heavy: return "Both"
        if bulky: return "Bulky"
        if heavy: return "Heavy"

        return "Neither"


if __name__ == "__main__":
    print(Solution().categorizeBox(length = 1000, width = 35, height = 700, mass = 300))    # "Heavy"
    print(Solution().categorizeBox(length = 200, width = 50, height = 800, mass = 50))      # "Neither"


# Runtime: 34 ms, faster than 48.25% of Python3 online submissions for Continuous Subarray Sum.
# Memory Usage: 14 MB, less than 15.69% of Python3 online submissions for Continuous Subarray Sum. 


#%%
