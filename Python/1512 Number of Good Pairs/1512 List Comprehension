class Solution:
   def numIdenticalPairs(self, nums):
       return len([(i,j) for i in range(0, len(nums)) for j in range(1, len(nums)) if i < j and nums[i] == nums[j]])
       

if __name__ == "__main__":
    lc = Solution() 
    print(lc.numIdenticalPairs([1,2,3,1,1,3]))      # There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.
    print(lc.numIdenticalPairs([1,1,1,1]))          # 6 Each pair in the array are good.
    print(lc.numIdenticalPairs([1,2,3]))            # 0
    
# Runtime: 48 ms, faster than 30.55% of Python3 online submissions for Number of Good Pairs.
# Memory Usage: 14.2 MB, less than 45.25% of Python3 online submissions for Number of Good Pairs.
