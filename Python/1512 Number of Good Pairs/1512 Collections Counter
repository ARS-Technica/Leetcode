import collections

class Solution:
   def numIdenticalPairs(self, nums):
        counter = collections.Counter(nums)
        return sum([x * (x - 1) for x in counter.values()]) // 2


if __name__ == "__main__":
    lc = Solution() 
    print(lc.numIdenticalPairs([1,2,3,1,1,3]))      # There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.
    print(lc.numIdenticalPairs([1,1,1,1]))          # 6 Each pair in the array are good.
    print(lc.numIdenticalPairs([1,2,3]))            # 0

# Runtime: 42 ms, faster than 38.64% of Python3 online submissions for Number of Good Pairs.
# Memory Usage: 14.4 MB, less than 10.34% of Python3 online submissions for Number of Good Pairs.
