"""
Despite being listed as a "Two Pointer" problem, it turns out 
that a simple set of loops solves the problem more efficently.
"""


class Solution:
    def rotate(self, nums, k):
        n = len(nums)
        k %= n 
        tmp = nums[-k:]
        
        for idx in reversed(range(k, len(nums))):
            nums[idx] = nums[idx-k]
            
        for idx, num in enumerate(tmp):
            nums[idx] = num
        
        print(nums)
        

if __name__ == "__main__":
    lc = Solution() 
    print(lc.rotate(nums = [1,2,3,4,5,6,7], k = 3))         # [5,6,7,1,2,3,4]
    print(lc.rotate(nums = [-1,-100,3,99], k = 2))          # [3,99,-1,-100] 


# Runtime: 204 ms, faster than 99.17% of Python3 online submissions for Rotate Array.
# Memory Usage: 25.4 MB, less than 32.06% of Python3 online submissions for Rotate Array.

