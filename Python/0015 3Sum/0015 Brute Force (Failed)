
 
class Solution:
    def threeSum(self, nums):
        res = []
        nums.sort()
        
        for i in nums:            
            for j in nums[i:-1]:
                for k in nums[j:]:
                    if i + j + k == 0:
                        temp = [i, j, k]
                        temp.sort()
                        if temp not in res:
                            res.append(temp)
            
        return res


if __name__ == "__main__":
    lc = Solution() 
    print(lc.threeSum([-1,0,1,2,-1,-4]))        # [[-1,-1,2],[-1,0,1]]
    print(lc.threeSum([]))                      # [] 


# [[0, 0, 0], [-1, 0, 1]]


#%%

# Brute Force

 
class Solution:
    def threeSum(self, nums): 
        res = []
        nums.sort()

        for idx_i, i in enumerate(nums[:-2]):            
            for idx_j, j in enumerate(nums[idx_i+1:-1]):
                for idx_k, k in enumerate(nums[idx_j+1:]):
                    if i + j + k == 0:
                        indexes = (idx_i, idx_j, idx_k)
                        if len(set(indexes)) == 3:                        
                            temp = [i, j, k]
                            temp.sort()
                            if temp not in res:
                                res.append(temp)
            
        return res


if __name__ == "__main__":
    lc = Solution() 
    print(lc.threeSum([-1,0,1,2,-1,-4]))        # [[-1,-1,2],[-1,0,1]]
    print(lc.threeSum([]))                      # [] 
    print(lc.threeSum([1,2,-2,-1]))             # []
    print(lc.threeSum([0,0,0]))                 # [0,0,0]
    

# Fails [0,0,0] test


#%%

# Brute Force

 
class Solution:
    def threeSum(self, nums): 
        res = []
        nums.sort()
        
        for idx_i, i in enumerate(nums[:-2]):            
            for idx_i, j in enumerate(nums[idx_i+1:-1]):
                for idx_i, k in enumerate(nums[idx_i+2:]):
                    #print(i, j, k)
                    if i + j + k == 0:
                        temp = [i, j, k]
                        temp.sort()
                        if temp not in res:
                            res.append(temp)

        return res


if __name__ == "__main__":
    lc = Solution() 
    print(lc.threeSum([-1,0,1,2,-1,-4]))        # [[-1,-1,2],[-1,0,1]]
    print(lc.threeSum([]))                      # [] 
    print(lc.threeSum([1,2,-2,-1]))             # []
    print(lc.threeSum([0,0,0]))                 # [0,0,0]
    print(lc.threeSum([-1,0,1,0]))              # [[-1,0,1]]  

# Fails [-1,0,1,0] test
