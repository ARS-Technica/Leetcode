"""
15. 3Sum
Medium 
https://leetcode.com/problems/3sum/

Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] 
such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.
"""


import itertools

class Solution:
    def threeSum(self, nums):
        permutations = []
        nums.sort()
        
        for i in set(itertools.combinations(nums,3)):            
            if sum(i) == 0:                
                permutations.append(list(i))
            
        return permutations
    

if __name__ == "__main__":
    lc = Solution() 
    print(lc.threeSum([-1,0,1,2,-1,-4]))        # [[-1,-1,2],[-1,0,1]]
    print(lc.threeSum([]))                      # [] 


# Memory Limit Exceeded

