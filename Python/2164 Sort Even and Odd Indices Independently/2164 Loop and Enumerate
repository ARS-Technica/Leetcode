"""
2164. Sort Even and Odd Indices Independently
Easy
https://leetcode.com/problems/sort-even-and-odd-indices-independently/ 

You are given a 0-indexed integer array nums. Rearrange the values of nums 
according to the following rules:

Sort the values at odd indices of nums in non-increasing order.
For example, if nums = [4,1,2,3] before this step, it becomes [4,3,2,1] after. 
The values at odd indices 1 and 3 are sorted in non-increasing order.
Sort the values at even indices of nums in non-decreasing order.
For example, if nums = [4,1,2,3] before this step, it becomes [2,1,4,3] after. 
The values at even indices 0 and 2 are sorted in non-decreasing order.
Return the array formed after rearranging the values of nums.

Constraints:

1 <= nums.length <= 100
1 <= nums[i] <= 100
"""


class Solution:
    def sortEvenOdd(self, nums):
        evens = []
        odds = []
        res = []

        for idx, n in enumerate(nums):
            if idx % 2 == 1:
                odds.append(n)
            else:
                evens.append(n)


        odds.sort(reverse=True)
        evens.sort()


        for idx, n in enumerate(nums):
            if idx % 2 == 1:
                res.append(odds.pop(0))
            else:
                res.append(evens.pop(0))

        return res


if __name__ == "__main__":
    lc = Solution() 
    print(lc.sortEvenOdd(nums = [4,1,2,3]))         # [2,3,4,1]
    print(lc.sortEvenOdd(nums = [2,1]))             # [2,1]
    print(lc.sortEvenOdd(nums = [36,45,32,31,15,41,9,46,36,6,15,16,33,26,27,31,44,34]))             
                                # [9,46,15,45,15,41,27,34,32,31,33,31,36,26,36,16,44,6]


# Runtime: 106 ms, faster than 12.94% of Python3 online submissions for Sort Even and Odd Indices Independently.
# Memory Usage: 14 MB, less than 23.55% of Python3 online submissions for Sort Even and Odd Indices Independently.


#%%
