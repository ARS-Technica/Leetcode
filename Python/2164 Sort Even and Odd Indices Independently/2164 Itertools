"""
2164. Sort Even and Odd Indices Independently
Easy
https://leetcode.com/problems/sort-even-and-odd-indices-independently/ 

You are given a 0-indexed integer array nums. Rearrange the values of nums 
according to the following rules:

Sort the values at odd indices of nums in non-increasing order.
For example, if nums = [4,1,2,3] before this step, it becomes [4,3,2,1] after. 
The values at odd indices 1 and 3 are sorted in non-increasing order.
Sort the values at even indices of nums in non-decreasing order.
For example, if nums = [4,1,2,3] before this step, it becomes [2,1,4,3] after. 
The values at even indices 0 and 2 are sorted in non-decreasing order.
Return the array formed after rearranging the values of nums.

Constraints:

1 <= nums.length <= 100
1 <= nums[i] <= 100
"""

# Basically the same answer as 922. Sort Array By Parity II


class Solution:
    def sortEvenOdd(self, nums):
        evens = sorted([n for n in nums if n % 2 == 0])
        odds = sorted([n for n in nums if n % 2 != 0], reverse=True) 
        
        res = [j for i in zip(evens, odds) for j in i]
        return res


if __name__ == "__main__":
    lc = Solution() 
    print(lc.sortEvenOdd(nums = [4,1,2,3]))         # [2,3,4,1]
    print(lc.sortEvenOdd(nums = [2,1]))             # [2,1]
    print(lc.sortEvenOdd(nums = [36,45,32,31,15,41,9,46,36,6,15,16,33,26,27,31,44,34]))             
                                # [9,46,15,45,15,41,27,34,32,31,33,31,36,26,36,16,44,6]
    

# Doesn't work for [36,45,32,31,15,41,9,46,36,6,15,16,33,26,27,31,44,34]


#%%


class Solution:
    def sortEvenOdd(self, nums):
        evens = sorted([nums[n] for n in range(0, len(nums), 2)])
        odds = sorted([nums[n] for n in range(1, len(nums), 2)], reverse=True) 
        
        res = [j for i in zip(evens, odds) for j in i]
        return res


if __name__ == "__main__":
    lc = Solution() 
    print(lc.sortEvenOdd(nums = [4,1,2,3]))         # [2,3,4,1]
    print(lc.sortEvenOdd(nums = [2,1]))             # [2,1]
    print(lc.sortEvenOdd(nums = [36,45,32,31,15,41,9,46,36,6,15,16,33,26,27,31,44,34]))             
                                # [9,46,15,45,15,41,27,34,32,31,33,31,36,26,36,16,44,6]
    print(lc.sortEvenOdd(nums = [5,39,33,5,12,27,20,45,14,25,32,33,30,30,9,14,44,15,21]))             
                                # [5,45,9,39,12,33,14,30,20,27,21,25,30,15,32,14,33,5,44]   


# Doesn't work for [5,45,9,39,12,33,14,30,20,27,21,25,30,15,32,14,33,5,44] 


#%%


import itertools

class Solution:
    def sortEvenOdd(self, nums):
        evens = sorted([nums[n] for n in range(0, len(nums), 2)])
        odds = sorted([nums[n] for n in range(1, len(nums), 2)], reverse=True) 
        
        res = [j for i in itertools.zip_longest(evens, odds, fillvalue ='') for j in i]
        # Leetcode won't accept [5,45,9,39,12,33,14,30,20,27,21,25,30,15,32,14,33,5,44,None] as an answer

        diff = min(len(evens), len(odds)) - max(len(evens), len(odds))
        # Leetcode won't accept [5,45,9,39,12,33,14,30,20,27,21,25,30,15,32,14,33,5,44,None] as an answer
        return res if diff == 0 else res[0:diff]


if __name__ == "__main__":
    lc = Solution() 
    print(lc.sortEvenOdd(nums = [4,1,2,3]))         # [2,3,4,1]
    print(lc.sortEvenOdd(nums = [2,1]))             # [2,1]
    print(lc.sortEvenOdd(nums = [36,45,32,31,15,41,9,46,36,6,15,16,33,26,27,31,44,34]))             
                                # [9,46,15,45,15,41,27,34,32,31,33,31,36,26,36,16,44,6]
    print(lc.sortEvenOdd(nums = [5,39,33,5,12,27,20,45,14,25,32,33,30,30,9,14,44,15,21]))             
                                # [5,45,9,39,12,33,14,30,20,27,21,25,30,15,32,14,33,5,44]   


# Runtime: 108 ms, faster than 11.08% of Python3 online submissions for Sort Even and Odd Indices Independently.
# Memory Usage: 13.8 MB, less than 73.90% of Python3 online submissions for Sort Even and Odd Indices Independently.


#%%
