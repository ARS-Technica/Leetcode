"""
35. Search Insert Position
Easy
https://leetcode.com/problems/search-insert-position/ 

Given a sorted array of distinct integers and a target value, return the index 
if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.
"""


def searchInsert(nums, target):
        for idx in range(len(nums)):
             if nums[idx] >= target:
                return idx
        return len(nums)
        

if __name__ == "__main__":
    print(searchInsert([1,3,5,6], 5))  # 2         
    print(searchInsert([1,3,5,6], 2))  # 1          
    print(searchInsert([1,3,5,6], 7))  # 4          
    print(searchInsert([1,3,5,6], 0))  # 0  
    print(searchInsert([1], 0))  # 0 


# Runtime: 48 ms, faster than 91.30% of Python3 online submissions for Search Insert Position.
# Memory Usage: 14.7 MB, less than 76.10% of Python3 online submissions for Search Insert Position.

