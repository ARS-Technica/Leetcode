
# Checking for edgecases actually makes this script LESS efficent


def searchInsert(nums, target):
    left = 0 
    right = len(nums) - 1

    if target > nums[-1]:
        return len(nums)
    if target < nums[0]:
        return 0
    
    while left <= right:
        middle = (left + right) // 2
        
        if target < nums[middle]:
            right = middle - 1
        elif target > nums[middle]:
            left = middle + 1
        else:
            return middle
          
    return left
        

if __name__ == "__main__":
    print(searchInsert([1,3,5,6], 5))   # 2         
    print(searchInsert([1,3,5,6], 2))   # 1          
    print(searchInsert([1,3,5,6], 7))   # 4          
    print(searchInsert([1,3,5,6], 0))   # 0  
    print(searchInsert([1], 0))         # 0 


# Runtime: 77 ms, faster than 39.15% of Python3 online submissions for Search Insert Position.
# Memory Usage: 14.7 MB, less than 76.10% of Python3 online submissions for Search Insert Position.
