"""
35. Search Insert Position
Easy
https://leetcode.com/problems/search-insert-position/
Created on Fri Dec  3 09:01:27 2021

Given a sorted array of distinct integers and a target value, return the index 
if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.
"""

# Simple Binary Search Algorithm


def searchInsert(nums, target):
    left = 0 
    right = len(nums) - 1
    
    while left <= right:
        middle = (left + right) // 2
        
        if target < nums[middle]:
            right = middle - 1
        elif target > nums[middle]:
            left = middle + 1
        else:
            return middle
        
    #return -1    
    return left   # The only alteration required to basic algorithm is to return left if number isn't present.
        

if __name__ == "__main__":
    print(searchInsert([1,3,5,6], 5))  # 2         
    print(searchInsert([1,3,5,6], 2))  # 1          
    print(searchInsert([1,3,5,6], 7))  # 4          
    print(searchInsert([1,3,5,6], 0))  # 0  
    print(searchInsert([1], 0))  # 0 


# Runtime: 60 ms, faster than 63.34% of Python3 online submissions for Search Insert Position.
# Memory Usage: 14.7 MB, less than 94.17% of Python3 online submissions for Search Insert Position.

# Still not as efficent as other submissions.  Why?

