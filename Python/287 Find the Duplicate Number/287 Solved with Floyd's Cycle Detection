"""
287. Find the Duplicate Number
https://leetcode.com/problems/find-the-duplicate-number/ 

Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.

There is only one repeated number in nums, return this repeated number.

You must solve the problem without modifying the array nums and uses only constant extra space.
"""

"""
This question is really only testing whether or not you've ever encountered 
Floyd's Cycle Detection algorithm before.  It's virtually impossible to solve 
within the constraints given unless you've already been shown the trick.

https://www.youtube.com/watch?v=wjYnzkAhcNk
"""


class Solution:
   def solve(self, nums):
       slow, fast = 0, 0
       
       while True:
           slow = nums[slow]
           fast = nums[nums[fast]]
           
           if slow == fast:
               break
           
       slow2 = 0
       
       while True:
           slow = nums[slow]
           slow2 = nums[slow2]
           
           if slow == slow2:
               return slow

 
if __name__ == "__main__":
    bs = Solution() 
    print(bs.solve([1, 3, 4, 2, 2]))    # 2
    print(bs.solve([3, 1, 3, 4, 2]))    # 3 


# Runtime: 797 ms, faster than 45.86% of Python3 online submissions for Find the Duplicate Number.
# Memory Usage: 28 MB, less than 79.59% of Python3 online submissions for Find the Duplicate Number.
