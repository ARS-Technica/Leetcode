"""
162. Find Peak Element
Created on Wed Feb  2 06:53:26 2022
https://leetcode.com/problems/find-peak-element/

A peak element is an element that is strictly greater than its neighbors.

Given an integer array nums, find a peak element, and return its index. If the 
array contains multiple peaks, return the index to any of the peaks.

You may imagine that nums[-1] = nums[n] = -âˆž.

You must write an algorithm that runs in O(log n) time.

 

Example 1:

Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2.
Example 2:

Input: nums = [1,2,1,3,5,6,4]
Output: 5
Explanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.
 

Constraints:

1 <= nums.length <= 1000
-231 <= nums[i] <= 231 - 1
nums[i] != nums[i + 1] for all valid i.
"""

class Solution:
    def findPeakElement(self, nums):
        left = 0 
        right = len(nums) - 1
        
        while left < right:
            middle = (left + right) // 2
            
            if nums[middle] < nums[middle + 1]:
                left = middle + 1
            elif nums[middle] < nums[middle - 1]:
                right = middle - 1
            else:
                return middle
            
        return 0
 

if __name__ == "__main__":
    lc = Solution() 
    print(lc.findPeakElement([1,2,3,1]))            # 2
    print(lc.findPeakElement([1,2,1,3,5,6,4]))      # 5 
    print(lc.findPeakElement([1]))                  # 0    
    print(lc.findPeakElement([1,2]))                # 1


# Doesn't work for two element arrays


#%%
 
class Solution:
    def findPeakElement(self, nums):
        left = 0 
        right = len(nums) - 1
        
        while left < right:
            middle = (left + right) // 2
            
            if nums[middle] > nums[middle + 1]:
                right = middle
            else:
                left = middle + 1

        return left


if __name__ == "__main__":
    lc = Solution() 
    print(lc.findPeakElement([1,2,3,1]))            # 2
    print(lc.findPeakElement([1,2,1,3,5,6,4]))      # 5 
    print(lc.findPeakElement([1]))                  # 0    
    print(lc.findPeakElement([1,2]))                # 1

    
# Runtime: 79 ms, faster than 19.93% of Python3 online submissions for Find Peak Element.
# Memory Usage: 14 MB, less than 96.14% of Python3 online submissions for Find Peak Element.
 
