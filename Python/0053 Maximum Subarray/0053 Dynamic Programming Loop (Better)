"""
53. Maximum Subarray
Easy
https://leetcode.com/problems/maximum-subarray/

Given an integer array nums, find the contiguous subarray (containing at least 
one number) which has the largest sum and return its sum.

A subarray is a contiguous part of an array.
"""


# Better solution. Not mine.
# https://leetcode.com/problems/maximum-subarray/discuss/1716441/Python-DP-Easy-O(n)

class Solution:
    def maxSubArray(self, nums): 
        if len(nums) == 1:
            return nums[0]

        dp = nums
        
        for i in range(1, len(nums)):
            dp[i] = max(dp[i], dp[i-1] + nums[i])
        
        return max(dp)


if __name__ == "__main__":
    lc = Solution() 
    print(lc.maxSubArray([-2,1,-3,4,-1,2,1,-5,4]))      # 6
    print(lc.maxSubArray([1]))                          # 1
    print(lc.maxSubArray([5,4,-1,7,8]))                 # 23


# Runtime: 1013 ms, faster than 45.27% of Python3 online submissions for Maximum Subarray.
# Memory Usage: 27.9 MB, less than 92.67% of Python3 online submissions for Maximum Subarray.


#%%


class Solution:
    def maxSubArray(self, nums): 
        for i in range(1, len(nums)):
            nums[i] = max(nums[i], nums[i-1] + nums[i])
        
        return max(nums)
    

if __name__ == "__main__":
    lc = Solution() 
    print(lc.maxSubArray([-2,1,-3,4,-1,2,1,-5,4]))      # 6
    print(lc.maxSubArray([1]))                          # 1
    print(lc.maxSubArray([5,4,-1,7,8]))                 # 23


# Runtime: 841 ms, faster than 60.40% of Python3 online submissions for Maximum Subarray.
# Memory Usage: 27.9 MB, less than 78.29% of Python3 online submissions for Maximum Subarray.
