"""
942. DI String Match
Easy
https://leetcode.com/problems/di-string-match/ 

A permutation perm of n + 1 integers of all the integers in the range [0, n] 
can be represented as a string s of length n where:

s[i] == 'I' if perm[i] < perm[i + 1], and
s[i] == 'D' if perm[i] > perm[i + 1].
Given a string s, reconstruct the permutation perm and return it. If there are 
multiple valid permutations perm, return any of them.

Constraints:

1 <= s.length <= 105
s[i] is either 'I' or 'D'.
"""


# Not mine.
# https://leetcode.com/problems/di-string-match/discuss/382097/Solution-in-Python-3-(beats-~100)-(one-line)


import collections

class Solution:
    def diStringMatch(self, s):
        return (lambda x: [x.pop() if i == 'D' else x.popleft() for i in s]+[x[0]])(collections.deque(range(len(s)+1)))


if __name__ == "__main__":
    lc = Solution() 
    print(lc.diStringMatch(s = "IDID"))         # [0,4,1,3,2]
    print(lc.diStringMatch(s = "III"))          # [0,1,2,3]
    print(lc.diStringMatch(s = "DDI"))          # [3,2,0,1]


# Runtime: 71 ms, faster than 73.55% of Python3 online submissions for DI String Match.
# Memory Usage: 15.3 MB, less than 49.37% of Python3 online submissions for DI String Match.

