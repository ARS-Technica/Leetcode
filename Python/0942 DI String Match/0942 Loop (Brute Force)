"""
942. DI String Match
Easy
https://leetcode.com/problems/di-string-match/ 

A permutation perm of n + 1 integers of all the integers in the range [0, n] 
can be represented as a string s of length n where:

s[i] == 'I' if perm[i] < perm[i + 1], and
s[i] == 'D' if perm[i] > perm[i + 1].
Given a string s, reconstruct the permutation perm and return it. If there are 
multiple valid permutations perm, return any of them.

Constraints:

1 <= s.length <= 105
s[i] is either 'I' or 'D'.
"""


class Solution:
    def diStringMatch(self, s):
        nums = [n for n in range(len(list(s))+1)]
        res = []

        for idx in list(s):
            if idx == 'I':
                res.append(nums.pop(0))
            else:
                res.append(nums.pop(-1))     

        res.append(nums.pop(0))
        return res


if __name__ == "__main__":
    lc = Solution() 
    print(lc.diStringMatch(s = "IDID"))         # [0,4,1,3,2]
    print(lc.diStringMatch(s = "III"))          # [0,1,2,3]
    print(lc.diStringMatch(s = "DDI"))          # [3,2,0,1]


# Runtime: 109 ms, faster than 29.44% of Python3 online submissions for DI String Match.
# Memory Usage: 15.4 MB, less than 8.24% of Python3 online submissions for DI String Match.

