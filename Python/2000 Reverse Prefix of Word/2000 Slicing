"""
2000. Reverse Prefix of Word
Easy
https://leetcode.com/problems/reverse-prefix-of-word/ 

Given a 0-indexed string word and a character ch, reverse the segment of word 
that starts at index 0 and ends at the index of the first occurrence of ch 
(inclusive). If the character ch does not exist in word, do nothing.

For example, if word = "abcdefd" and ch = "d", then you should reverse the 
segment that starts at 0 and ends at 3 (inclusive). The resulting string will be "dcbaefd".
Return the resulting string.
"""
 

class Solution:
    def reversePrefix(self, word, ch):
        try:
            return word[0:word.index(ch)+1][::-1] + word[word.index(ch)+1:]
        except:
            return word


if __name__ == "__main__":
    lc = Solution() 
    print(lc.reversePrefix(word = "abcdefd", ch = "d"))         # "dcbaefd"
    print(lc.reversePrefix(word = "xyxzxe", ch = "z"))          # "zxyxxe"
    print(lc.reversePrefix(word = "abcd", ch = "z"))            # "abcd"


# Runtime: 39 ms, faster than 64.37% of Python3 online submissions for Reverse Prefix of Word.
# Memory Usage: 13.8 MB, less than 67.88% of Python3 online submissions for Reverse Prefix of Word.
 
 
#%%
 

class Solution:
    def reversePrefix(self, word, ch):
        idx = word.find(ch)
        if idx:
            return word[:idx+1][::-1] + word[idx+1:]
        return word


if __name__ == "__main__":
    lc = Solution() 
    print(lc.reversePrefix(word = "abcdefd", ch = "d"))         # "dcbaefd"
    print(lc.reversePrefix(word = "xyxzxe", ch = "z"))          # "zxyxxe"
    print(lc.reversePrefix(word = "abcd", ch = "z"))            # "abcd"


# Runtime: 38 ms, faster than 66.13% of Python3 online submissions for Reverse Prefix of Word.
# Memory Usage: 13.8 MB, less than 67.88% of Python3 online submissions for Reverse Prefix of Word.


#%%


class Solution:
    def reversePrefix(self, word, ch):
        try:
            idx = word.index(ch)
            return word[0:idx+1][::-1] + word[idx+1:]
        except:
            return word


if __name__ == "__main__":
    lc = Solution() 
    print(lc.reversePrefix(word = "abcdefd", ch = "d"))         # "dcbaefd"
    print(lc.reversePrefix(word = "xyxzxe", ch = "z"))          # "zxyxxe"
    print(lc.reversePrefix(word = "abcd", ch = "z"))            # "abcd"


# Runtime: 24 ms, faster than 98.45% of Python3 online submissions for Reverse Prefix of Word.
# Memory Usage: 13.9 MB, less than 67.88% of Python3 online submissions for Reverse Prefix of Word.


#%%


class Solution:
    def reversePrefix(self, word, ch):
        idx = word.find(ch)
        return word if idx == -1 else word[idx::-1] + word[idx + 1:]


if __name__ == "__main__":
    lc = Solution() 
    print(lc.reversePrefix(word = "abcdefd", ch = "d"))         # "dcbaefd"
    print(lc.reversePrefix(word = "xyxzxe", ch = "z"))          # "zxyxxe"
    print(lc.reversePrefix(word = "abcd", ch = "z"))            # "abcd"


# Runtime: 30 ms, faster than 89.79% of Python3 online submissions for Reverse Prefix of Word.
# Memory Usage: 13.8 MB, less than 97.90% of Python3 online submissions for Reverse Prefix of Word.

