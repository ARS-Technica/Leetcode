"""
30. Substring with Concatenation of All Words
Hard
https://leetcode.com/problems/substring-with-concatenation-of-all-words/ 

You are given a string s and an array of strings words. All the strings of words
are of the same length.

A concatenated substring in s is a substring that contains all the strings of
any permutation of words concatenated.

For example, if words = ["ab","cd","ef"], then "abcdef", "abefcd", "cdabef",
"cdefab", "efabcd", and "efcdab" are all concatenated strings. "acdbef" is not
a concatenated substring because it is not the concatenation of any permutation
of words.

Return the starting indices of all the concatenated substrings in s. You can
return the answer in any order.
"""

# Static Sliding Window


from itertools import permutations

class Solution:
    def findSubstring(self, s, words):
        index = []
        perms = permutations(words)
        targets = []

        for i in perms:
            targets.append(''.join(i))

        for i in range(len(s)):
            if s[i:i+len(targets[0])] in targets:
                index.append(i) 

        return index


if __name__ == "__main__":
    print(Solution().findSubstring(s = "abcdef", words = ["ab","cd","ef"]))    # [0]
    print(Solution().findSubstring(s = "barfoothefoobarman", words = ["foo","bar"]))    # [0,9]
    print(Solution().findSubstring(s = "wordgoodgoodgoodbestword", words = ["word","good","best","word"]))    # []
    print(Solution().findSubstring(s = "barfoofoobarthefoobarman", words = ["bar","foo","the"]))    # [6,9,12]


# Memory Limit Exceeded


#%%

# Static Sliding Window with List Comprehension


from itertools import permutations

class Solution:
    def findSubstring(self, s, words):        
        perms = permutations(words)
        targets = [''.join(i) for i in perms] 
        index = [i for i in range(len(s)) if s[i:i+len(targets[0])] in targets] 
        
        return index


if __name__ == "__main__":
    print(Solution().findSubstring(s = "abcdef", words = ["ab","cd","ef"]))    # [0]
    print(Solution().findSubstring(s = "barfoothefoobarman", words = ["foo","bar"]))    # [0,9]
    print(Solution().findSubstring(s = "wordgoodgoodgoodbestword", words = ["word","good","best","word"]))    # []
    print(Solution().findSubstring(s = "barfoofoobarthefoobarman", words = ["bar","foo","the"]))    # [6,9,12]


# Memory Limit Exceeded


#%%
