"""
30. Substring with Concatenation of All Words
Hard
https://leetcode.com/problems/substring-with-concatenation-of-all-words/ 

You are given a string s and an array of strings words. All the strings of words
are of the same length.

A concatenated substring in s is a substring that contains all the strings of
any permutation of words concatenated.

For example, if words = ["ab","cd","ef"], then "abcdef", "abefcd", "cdabef",
"cdefab", "efabcd", and "efcdab" are all concatenated strings. "acdbef" is not
a concatenated substring because it is not the concatenation of any permutation
of words.

Return the starting indices of all the concatenated substrings in s. You can
return the answer in any order.
"""


class Solution:
    def findSubstring(self, s, words):
        if len(s) == 0 or s is None or words is None:
            return []

        count = {}
        res = []
        wordLength = len(words[0])
        window = len(words) * wordLength

        for word in words:
            count[word] = count.get(word, 0) + 1

        for left in range(len(s) - window + 1):
            used = {}

            for right in range(len(words)):
                wordIndex = left + right * wordLength
                tempWord = s[wordIndex : wordIndex + wordLength]

                if tempWord not in count:
                    break

                used[tempWord] = used.get(tempWord, 0) + 1

                if used[tempWord] > count[tempWord]:
                    break

            if used == count:
                res.append(left)

        return res


if __name__ == "__main__":
    print(Solution().findSubstring(s = "abcdef", words = ["ab","cd","ef"]))    # [0]
    print(Solution().findSubstring(s = "barfoothefoobarman", words = ["foo","bar"]))    # [0,9]
    print(Solution().findSubstring(s = "wordgoodgoodgoodbestword", words = ["word","good","best","word"]))    # []
    print(Solution().findSubstring(s = "barfoofoobarthefoobarman", words = ["bar","foo","the"]))    # [6,9,12]


# Runtime: 1158 ms, faster than 23.42% of Python3 online submissions for Substring with Concatenation of All Words.
# Memory Usage: 14.1 MB, less than 75.95% of Python3 online submissions for Substring with Concatenation of All Words.


#%% 

# Not mine.
# https://leetcode.com/problems/substring-with-concatenation-of-all-words/discuss/1805387/Sliding-window-intuitive-Python-solution-with-Counter


from collections import Counter

class Solution:
    def findSubstring(self, s, words):
        if len(s) == 0 or s is None or words is None:
            return []

        word_len = len(words[0])
        counter = Counter(words)
        window_size = len(words) * word_len
        ans = []

        for i in range(len(s) - window_size + 1):
            temp = s[i:i+window_size]
            temp = [temp[j:j+word_len] for j in range(0, window_size, word_len)]
            if Counter(temp) == counter:
                ans.append(i)

        return ans


if __name__ == "__main__":
    print(Solution().findSubstring(s = "abcdef", words = ["ab","cd","ef"]))    # [0]
    print(Solution().findSubstring(s = "barfoothefoobarman", words = ["foo","bar"]))    # [0,9]
    print(Solution().findSubstring(s = "wordgoodgoodgoodbestword", words = ["word","good","best","word"]))    # []
    print(Solution().findSubstring(s = "barfoofoobarthefoobarman", words = ["bar","foo","the"]))    # [6,9,12]


# Runtime: 2157 ms, faster than 13.60% of Python3 online submissions for Substring with Concatenation of All Words.
# Memory Usage: 14.1 MB, less than 75.95% of Python3 online submissions for Substring with Concatenation of All Words.


#%% 
