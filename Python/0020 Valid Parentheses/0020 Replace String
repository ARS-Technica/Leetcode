"""
20. Valid Parentheses 
https://leetcode.com/problems/valid-parentheses/

Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', 
determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.


Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "()[]{}"
Output: true
Example 3:

Input: s = "(]"
Output: false
Example 4:

Input: s = "([)]"
Output: false
Example 5:

Input: s = "{[]}"
Output: true



An interesting property about a valid parenthesis expression is that a 
sub-expression of a valid expression should also be a valid expression. 
(Not every sub-expression) e.g.
{ { } [ ] [ [ [ ] ] ] } is VALID expression
          [ [ [ ] ] ]    is VALID sub-expression
  { } [ ]                is VALID sub-expression
Can we exploit this recursive structure somehow?



What if whenever we encounter a matching pair of parenthesis in the expression, 
we simply remove it from the expression? This would keep on shortening the expression. e.g.
{ { ( { } ) } }
      |_|

{ { (      ) } }
    |______|

{ {          } }
  |__________|

{                }
|________________|

VALID EXPRESSION!



The stack data structure can come in handy here in representing this recursive 
structure of the problem. We can't really process this from the inside out 
because we don't have an idea about the overall structure. But, the stack can 
help us process this recursively i.e. from outside to inwards.
"""

# What would happen if you tried to solve this problem without knowning what a stack is?  This.

class Solution:
    def isValid(self, s: str) -> bool:   
        replace_list = ['()', '[]', '{}']
        
        def remove_pairs(cur_string, replace_list):
            s.replace(" ", "")
            for cur_word in replace_list:
                cur_string = cur_string.replace(cur_word, '')
                
            return cur_string  
    
                       
        if len(s) == 0:
            return True    
        elif len(s) % 2 != 0:
            return False        
        else:
            for n in range(len(s)//2):
               s = remove_pairs(s, replace_list)   
        
        if len(s) == 0:
            return True
        else:
            return False


if __name__ == '__main__':
    print(Solution().isValid('()'))        #true
    print(Solution().isValid('()[]{}'))    #true
    print(Solution().isValid('(]'))        #false
    print(Solution().isValid('([)]'))      #false
    print(Solution().isValid('{[]}'))      #true
    print(Solution().isValid('([])'))      #true    

# Runtime: 52 ms, faster than 23.56% of Python3 online submissions for Valid Parentheses.
# Memory Usage: 13.9 MB, less than 95.11% of Python3 online submissions for Valid Parentheses.    
