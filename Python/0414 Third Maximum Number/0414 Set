"""
414. Third Maximum Number
Easy
https://leetcode.com/problems/third-maximum-number/ 

Given an integer array nums, return the third distinct maximum number in this
array. If the third maximum does not exist, return the maximum number.
"""


class Solution:
    def thirdMax(self, nums):
        count = 0
        unique = set(nums)
        # print(unique)

        if len(unique) < 3:
            return max(nums)

        while count < 2:
                # print(max(unique))
                unique.remove(max(unique))
                count += 1

        return max(unique)


if __name__ == '__main__':
    print(Solution().thirdMax(nums = [3,2,1]))          # 1
    print(Solution().thirdMax(nums = [1,2]))            # 2   
    print(Solution().thirdMax(nums = [2,2,3,1]))        # 1
    print(Solution().thirdMax(nums = [1,1,2]))          # 2
    print(Solution().thirdMax(nums = [5,2,2]))          # 5
    print(Solution().thirdMax(nums = [1,2,2,5,3,5]))    # 2


# Runtime: 91 ms, faster than 73.76% of Python3 online submissions for Third Maximum Number.
# Memory Usage: 15.5 MB, less than 22.55% of Python3 online submissions for Third Maximum Number.


#%%


class Solution:
    def thirdMax(self, nums):
        unique = set()

        for idx in nums:
            if idx not in unique:
                unique.add(idx)

        unique = list(unique)
        unique.sort()

        return unique[-3] if len(unique)>=3 else unique[-1]


if __name__ == '__main__':
    print(Solution().thirdMax(nums = [3,2,1]))          # 1
    print(Solution().thirdMax(nums = [1,2]))            # 2   
    print(Solution().thirdMax(nums = [2,2,3,1]))        # 1
    print(Solution().thirdMax(nums = [1,1,2]))          # 2
    print(Solution().thirdMax(nums = [5,2,2]))          # 5
    print(Solution().thirdMax(nums = [1,2,2,5,3,5]))    # 2


# Runtime: 102 ms, faster than 64.14% of Python3 online submissions for Third Maximum Number.
# Memory Usage: 15.4 MB, less than 52.18% of Python3 online submissions for Third Maximum Number.


#%%


class Solution:
    def thirdMax(self, nums):
        nums = sorted(list(set(nums)))
        return nums[-3] if len(nums) > 2 else nums[-1]


if __name__ == '__main__':
    print(Solution().thirdMax(nums = [3,2,1]))          # 1
    print(Solution().thirdMax(nums = [1,2]))            # 2   
    print(Solution().thirdMax(nums = [2,2,3,1]))        # 1
    print(Solution().thirdMax(nums = [1,1,2]))          # 2
    print(Solution().thirdMax(nums = [5,2,2]))          # 5
    print(Solution().thirdMax(nums = [1,2,2,5,3,5]))    # 2


# Runtime: 114 ms, faster than 43.15% of Python3 online submissions for Third Maximum Number.
# Memory Usage: 12.1 MB, less than 99.98% of Python3 online submissions for Third Maximum Number.


#%%


class Solution:
    def thirdMax(self, nums):
        return max(nums) if len(set(nums)) < 3 else sorted(list(set(nums)))[-3]


if __name__ == '__main__':
    print(Solution().thirdMax(nums = [3,2,1]))          # 1
    print(Solution().thirdMax(nums = [1,2]))            # 2   
    print(Solution().thirdMax(nums = [2,2,3,1]))        # 1
    print(Solution().thirdMax(nums = [1,1,2]))          # 2
    print(Solution().thirdMax(nums = [5,2,2]))          # 5
    print(Solution().thirdMax(nums = [1,2,2,5,3,5]))    # 2


# Runtime: 118 ms, faster than 34.73% of Python3 online submissions for Third Maximum Number.
# Memory Usage: 15.6 MB, less than 22.55% of Python3 online submissions for Third Maximum Number.


#%%


# Alternate Solution. Not mine.
# https://leetcode.com/problems/third-maximum-number/discuss/2511748/Think-it-through


# Time Complexity: O(N) | Space: O(N)


class Solution:
    def thirdMax(self, nums):
        nums = set(nums)

        if len(nums) < 3:
            return max(nums)

        first_max = max(nums)
        nums.remove(first_max)

        second_max = max(nums)
        nums.remove(second_max)

        return max(nums)


if __name__ == '__main__':
    print(Solution().thirdMax(nums = [3,2,1]))          # 1
    print(Solution().thirdMax(nums = [1,2]))            # 2   
    print(Solution().thirdMax(nums = [2,2,3,1]))        # 1
    print(Solution().thirdMax(nums = [1,1,2]))          # 2
    print(Solution().thirdMax(nums = [5,2,2]))          # 5
    print(Solution().thirdMax(nums = [1,2,2,5,3,5]))    # 2


# Runtime: 123 ms, faster than 25.65% of Python3 online submissions for Third Maximum Number.
# Memory Usage: 15.5 MB, less than 52.18% of Python3 online submissions for Third Maximum Number.


#%%
