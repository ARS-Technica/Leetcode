"""
1636. Sort Array by Increasing Frequency
Easy
https://leetcode.com/problems/sort-array-by-increasing-frequency/ 

Given an array of integers nums, sort the array in increasing order based on
the frequency of the values. If multiple values have the same frequency, sort
them in decreasing order.

Return the sorted array.
"""


from collections import Counter


class Solution:
    def frequencySort(self, nums):
        result = []

        for char, count in Counter(nums).most_common():
            result += [char] * count

        return result[::-1]


if __name__ == '__main__':
    print(Solution().frequencySort(nums = [1,1,2,2,2,3]))                       # [3,1,1,2,2,2]
    print(Solution().frequencySort(nums = [2,3,1,3,2]))                         # [1,3,3,2,2]
    print(Solution().frequencySort(nums = [-1,1,-6,4,5,-6,1,4,1]))              # [5,-1,4,4,-6,-6,1,1,1]
    print(Solution().frequencySort(nums = [1,5,0,5]))                           # [1,0,5,5]


# Doesn't work for [1,5,0,5]
# If multiple values have the same frequency, sort them in decreasing order.


#%%


from collections import Counter


class Solution:
    def frequencySort(self, nums):
        frequency = Counter(nums)
        order = sorted(frequency, key=lambda i: (frequency[i], -i))
        # print(order)
        result = []

        for number in order:
            # result += number * frequency[number]        # TypeError: 'int' object is not iterable
            count = frequency[number]

            while count > 0:
                result.append(number)
                count -= 1

        return result


if __name__ == '__main__':
    print(Solution().frequencySort(nums = [1,1,2,2,2,3]))                       # [3,1,1,2,2,2]
    print(Solution().frequencySort(nums = [2,3,1,3,2]))                         # [1,3,3,2,2]
    print(Solution().frequencySort(nums = [-1,1,-6,4,5,-6,1,4,1]))              # [5,-1,4,4,-6,-6,1,1,1]
    print(Solution().frequencySort(nums = [1,5,0,5]))                           # [1,0,5,5]


# Runtime: 99 ms, faster than 57.00% of Python3 online submissions for Sort Array by Increasing Frequency.
# Memory Usage: 13.8 MB, less than 67.72% of Python3 online submissions for Sort Array by Increasing Frequency.


#%%


from collections import Counter


class Solution:
    def frequencySort(self, nums):
        frequency = Counter(nums)
        order = sorted(nums, key=lambda i: (frequency[i], -i))
        return order


if __name__ == '__main__':
    print(Solution().frequencySort(nums = [1,1,2,2,2,3]))                       # [3,1,1,2,2,2]
    print(Solution().frequencySort(nums = [2,3,1,3,2]))                         # [1,3,3,2,2]
    print(Solution().frequencySort(nums = [-1,1,-6,4,5,-6,1,4,1]))              # [5,-1,4,4,-6,-6,1,1,1]
    print(Solution().frequencySort(nums = [1,5,0,5]))                           # [1,0,5,5]


# Runtime: 56 ms, faster than 90.54% of Python3 online submissions for Sort Array by Increasing Frequency.
# Memory Usage: 13.9 MB, less than 23.79% of Python3 online submissions for Sort Array by Increasing Frequency.


#%%


from collections import Counter


class Solution:
    def frequencySort(self, nums): 
        return sorted(nums, key=lambda i: (Counter(nums)[i], -i)) 


if __name__ == '__main__':
    print(Solution().frequencySort(nums = [1,1,2,2,2,3]))                       # [3,1,1,2,2,2]
    print(Solution().frequencySort(nums = [2,3,1,3,2]))                         # [1,3,3,2,2]
    print(Solution().frequencySort(nums = [-1,1,-6,4,5,-6,1,4,1]))              # [5,-1,4,4,-6,-6,1,1,1]
    print(Solution().frequencySort(nums = [1,5,0,5]))                           # [1,0,5,5]


# Runtime: 102 ms, faster than 51.39% of Python3 online submissions for Sort Array by Increasing Frequency.
# Memory Usage: 13.8 MB, less than 97.71% of Python3 online submissions for Sort Array by Increasing Frequency.


#%%
