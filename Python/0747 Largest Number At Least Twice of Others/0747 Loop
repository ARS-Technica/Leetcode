"""
747. Largest Number At Least Twice of Others
Easy
https://leetcode.com/problems/largest-number-at-least-twice-of-others/ 

You are given an integer array nums where the largest integer is unique.

Determine whether the largest element in the array is at least twice as much 
as every other number in the array. If it is, return the index of the largest 
element, or return -1 otherwise.

Constraints:

1 <= nums.length <= 50
0 <= nums[i] <= 100
The largest element in nums is unique.
"""


class Solution:
    def dominantIndex(self, nums):     
        if len(nums) == 1: return 0
        res = nums.index(max(nums))        
        sorted_nums = sorted(nums)
        if sorted_nums[-2] * 2 > sorted_nums[-1]: return -1
        return res


if __name__ == "__main__":
    lc = Solution() 
    print(lc.dominantIndex(nums = [3,6,1,0]))       # 1
    print(lc.dominantIndex(nums = [1,2,3,4]))       # -1
    print(lc.dominantIndex(nums = [1]))             # 0


# Runtime: 54 ms, faster than 36.43% of Python3 online submissions for Largest Number At Least Twice of Others.
# Memory Usage: 13.8 MB, less than 61.88% of Python3 online submissions for Largest Number At Least Twice of Others.


#%%


class Solution:
    def dominantIndex(self, nums):     
        if len(nums) == 1: return 0
        largest_number = max(nums) 
        if largest_number < (sorted(nums)[-2] * 2): return -1
        return nums.index(largest_number)


if __name__ == "__main__":
    lc = Solution() 
    print(lc.dominantIndex(nums = [3,6,1,0]))       # 1
    print(lc.dominantIndex(nums = [1,2,3,4]))       # -1
    print(lc.dominantIndex(nums = [1]))             # 0


# Runtime: 48 ms, faster than 49.46% of Python3 online submissions for Largest Number At Least Twice of Others.
# Memory Usage: 13.9 MB, less than 61.88% of Python3 online submissions for Largest Number At Least Twice of Others.


#%%


class Solution:
    def dominantIndex(self, nums):       
        if len(nums) == 1: return 0
        sorted_nums = sorted(nums)
        if sorted_nums[-2] * 2 > sorted_nums[-1]: return -1
        return nums.index(max(nums))


if __name__ == "__main__":
    lc = Solution() 
    print(lc.dominantIndex(nums = [3,6,1,0]))       # 1
    print(lc.dominantIndex(nums = [1,2,3,4]))       # -1
    print(lc.dominantIndex(nums = [1]))             # 0


# Runtime: 38 ms, faster than 78.35% of Python3 online submissions for Largest Number At Least Twice of Others.
# Memory Usage: 13.9 MB, less than 61.88% of Python3 online submissions for Largest Number At Least Twice of Others.


#%%
