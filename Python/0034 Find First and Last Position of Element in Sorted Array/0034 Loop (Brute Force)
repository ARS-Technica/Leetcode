"""
34. Find First and Last Position of Element in Sorted Array
Medium
https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/ 

Given an array of integers nums sorted in non-decreasing order, find the 
starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109
nums is a non-decreasing array.
-109 <= target <= 109
"""


class Solution:
    def searchRange(self, nums, target):
        positions = []
                     
        for i, n in enumerate(nums):
            if n == target:
                positions.append(i)
        
        
        if len(positions) > 0:
            return [positions[0], positions[-1]] 
        else:
            return [-1, -1]


if __name__ == "__main__":
    lc = Solution() 
    print(lc.searchRange(nums = [5,7,7,8,8,10], target = 8))        # [3,4]
    print(lc.searchRange(nums = [5,7,7,8,8,10], target = 6))        # [-1,-1]
    print(lc.searchRange(nums = [], target = 0))                    # [-1,-1]
    print(lc.searchRange(nums = [1], target = 1))                   # [0,0]


# Runtime: 110 ms, faster than 52.55% of Python3 online submissions for Find First and Last Position of Element in Sorted Array.
# Memory Usage: 15.5 MB, less than 53.03% of Python3 online submissions for Find First and Last Position of Element in Sorted Array.


#%%


class Solution:
    def searchRange(self, nums, target):
        positions = [i for i, n in enumerate(nums) if n == target]
        if len(positions) > 0:
            return [positions[0], positions[-1]] 
        else:
            return [-1, -1]


if __name__ == "__main__":
    lc = Solution() 
    print(lc.searchRange(nums = [5,7,7,8,8,10], target = 8))        # [3,4]
    print(lc.searchRange(nums = [5,7,7,8,8,10], target = 6))        # [-1,-1]
    print(lc.searchRange(nums = [], target = 0))                    # [-1,-1]
    print(lc.searchRange(nums = [1], target = 1))                   # [0,0]


# Runtime: 100 ms, faster than 63.97% of Python3 online submissions for Find First and Last Position of Element in Sorted Array.
# Memory Usage: 15.5 MB, less than 53.03% of Python3 online submissions for Find First and Last Position of Element in Sorted Array.


#%%


class Solution:
    def searchRange(self, nums, target):
        try:
            i = nums.index(target)
        except:
            return [-1, -1]
        
        j = (len(nums) - 1) - sorted(nums, reverse=True).index(target)
        return [i, j]


if __name__ == "__main__":
    lc = Solution() 
    print(lc.searchRange(nums = [5,7,7,8,8,10], target = 8))        # [3,4]
    print(lc.searchRange(nums = [5,7,7,8,8,10], target = 6))        # [-1,-1]
    print(lc.searchRange(nums = [], target = 0))                    # [-1,-1]
    print(lc.searchRange(nums = [1], target = 1))                   # [0,0]


# Runtime: 115 ms, faster than 47.46% of Python3 online submissions for Find First and Last Position of Element in Sorted Array.
# Memory Usage: 15.4 MB, less than 53.03% of Python3 online submissions for Find First and Last Position of Element in Sorted Array.

