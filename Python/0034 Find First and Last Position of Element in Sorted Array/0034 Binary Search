"""
34. Find First and Last Position of Element in Sorted Array
Medium
https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/ 

Given an array of integers nums sorted in non-decreasing order, find the 
starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109
nums is a non-decreasing array.
-109 <= target <= 109
"""

# Binary Search


class Solution:
    def searchRange(self, nums, target):
        first = -1
        second = -1
          
        # Search the left side of array
        left = 0 
        right = len(nums) - 1
        
        while left <= right:
            middle = left + (right - left) // 2
            
            if nums[middle] == target:
                if middle - 1 >= 0 and nums[middle - 1] == target:
                    right = middle - 1
                else:
                    first = middle
                    break
            elif nums[middle] < target:
                left = middle + 1
            else:
                right = middle - 1
        
        # Search the right side of array
        left = 0 
        right = len(nums) - 1
        
        while left <= right:
            middle = left + (right - left) // 2
            
            if nums[middle] == target:
                if middle + 1 < len(nums) and nums[middle + 1] == target:
                    left = middle + 1
                else:
                    second = middle
                    break
            elif nums[middle] < target:
                left = middle + 1
            else:
                right = middle - 1
        
        return [first, second]
                

if __name__ == "__main__":
    lc = Solution() 
    print(lc.searchRange(nums = [5,7,7,8,8,10], target = 8))        # [3,4]
    print(lc.searchRange(nums = [5,7,7,8,8,10], target = 6))        # [-1,-1]
    print(lc.searchRange(nums = [], target = 0))                    # [-1,-1]


# Runtime: 172 ms, faster than 7.64% of Python3 online submissions for Find First and Last Position of Element in Sorted Array.
# Memory Usage: 15.5 MB, less than 11.39% of Python3 online submissions for Find First and Last Position of Element in Sorted Array.


#%%


class Solution:
    def searchRange(self, nums, target):

        def find_extremity(key):
            left = 0
            right = len(nums) - 1
            res = -1
            
            while left <= right:
                middle = (left + right) // 2
                
                if nums[middle] < target:
                    left = middle + 1
                elif target < nums[middle]:
                    right = middle -1
                else:
                    res = middle
                    
                    if key == "First Element":
                        right = middle - 1
                    else: 
                        left = middle + 1

            return res

        first = find_extremity("First Element")
        second = find_extremity("Second Element")
    
        return [first, second]
                

if __name__ == "__main__":
    lc = Solution() 
    print(lc.searchRange(nums = [5,7,7,8,8,10], target = 8))        # [3,4]
    print(lc.searchRange(nums = [5,7,7,8,8,10], target = 6))        # [-1,-1]
    print(lc.searchRange(nums = [], target = 0))                    # [-1,-1]


# Runtime: 96 ms, faster than 70.18% of Python3 online submissions for Find First and Last Position of Element in Sorted Array.
# Memory Usage: 15.4 MB, less than 94.17% of Python3 online submissions for Find First and Last Position of Element in Sorted Array.


#%%
