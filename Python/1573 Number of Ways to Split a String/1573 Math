"""
1573. Number of Ways to Split a String
Medium
https://leetcode.com/problems/number-of-ways-to-split-a-string/description/

Given a binary string s, you can split s into 3 non-empty strings s1, s2,
and s3 where s1 + s2 + s3 = s.

Return the number of ways s can be split such that the number of ones is the
same in s1, s2, and s3. Since the answer may be too large, return it modulo 109 + 7.
"""


# Time Complexity: O(N) | Space Complexity: O(N)


class Solution:
    def numWays(self, s):
        index = []
        length = len(s)

        for i in range(length):
            if s[i] == '1':
                index.append(i)

        count = len(index)

        if count == 0: return ((length - 1) * (length - 2) // 2) % (10**9 + 7)
        if count % 3 != 0: return 0

        count = count // 3

        left = index[count] - index[count - 1]
        right = index[2 * count] - index[2 * count - 1]
        result = left * right

        return result % (10**9 + 7)


if __name__ == '__main__':
    print(Solution().numWays(s = "10101"))              # 4
    print(Solution().numWays(s = "1001"))               # 0
    print(Solution().numWays(s = "100100010100110"))    # 12
    print(Solution().numWays(s = "0000"))               # 3
    print(Solution().numWays(s = "111"))                # 1
    print(Solution().numWays(s = "00000000"))           # 21
    print(Solution().numWays(s = "101100111111"))       # 3


# Runtime: 104 ms, faster than 93.55% of Python3 online submissions
# Memory Usage: 15.2 MB, less than 41.40% of Python3 online submissions


#%%


# Time Complexity: O(N) | Space Complexity: O(N)


class Solution:
    def numWays(self, s):        
        length = len(s)
        index = [ i for i in range(length) if s[i] == '1' ]
        count = len(index)

        if count == 0: return ((length - 1) * (length - 2) // 2) % (10**9 + 7)
        if count % 3 != 0: return 0

        count = count // 3

        left = index[count] - index[count - 1]
        right = index[2 * count] - index[2 * count - 1]
        result = left * right

        return result % (10**9 + 7)


if __name__ == '__main__':
    print(Solution().numWays(s = "10101"))              # 4
    print(Solution().numWays(s = "1001"))               # 0
    print(Solution().numWays(s = "100100010100110"))    # 12
    print(Solution().numWays(s = "0000"))               # 3
    print(Solution().numWays(s = "111"))                # 1
    print(Solution().numWays(s = "00000000"))           # 21
    print(Solution().numWays(s = "101100111111"))       # 3


# Runtime: 98 ms, faster than 95.70% of Python3 online submissions
# Memory Usage: 15 MB, less than 49.46% of Python3 online submissions


#%%





