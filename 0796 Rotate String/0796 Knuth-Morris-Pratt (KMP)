
# Better solution. Not mine.
# https://leetcode.com/problems/rotate-string/discuss/765553/Python-O(N)-Solution-KMP-(made-easy)-beats-99
 
"""
KMP algorithm
time: O(N)
space: O(N)
"""

class Solution:
    def rotateString(self, s, goal): 
        if len(s) != len(goal): return False
        if len(s) == 0: return True
        
        # capture length of strings
        # then make both strings 1 indexed
        N = len(s)
        s = " " + s + s
        goal = " " + goal
        
        # calculate pi table, it captures the length of the
		# longest prefix that is also the suffix
        pi = [0] * (N+1)
        left, pi[0] = -1, -1
        for right in range(1, N+1):
            while left >= 0 and goal[left + 1] != goal[right]:
                left = pi[left]
            left += 1
            pi[right] = left
        
        # do matching
        j = 0
        for i in range(1, (2*N)+1):
            while j >= 0 and goal[j+1] != s[i]:
                j = pi[j]
            j += 1
            if j == N: return True
        
        return False

    
if __name__ == "__main__":
    lc = Solution() 
    print(lc.rotateString(s = "abcde", goal = "cdeab"))                 # true
    print(lc.rotateString(s = "abcde", goal = "abced"))                 # false
    print(lc.rotateString(s = "bbbacddceeb", goal = "ceebbbbacdd"))     # true  


# Runtime: 39 ms, faster than 63.47% of Python3 online submissions for Rotate String.
# Memory Usage: 13.9 MB, less than 66.05% of Python3 online submissions for Rotate String.

"""
References:
https://web.stanford.edu/class/cs97si/10-string-algorithms.pdf
https://www.youtube.com/watch?v=BXCEFAzhxGY
"""

